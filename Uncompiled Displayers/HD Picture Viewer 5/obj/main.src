; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <tice.h>
;    2	#include <graphx.h>
;    3	#include <keypadc.h>
;    4	#include <stdbool.h>
;    5	#include <stddef.h>
;    6	#include <stdint.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	#include <fileioc.h>
;   11	
;   12	/* globals */
;   13	
;   14	#define BYTES_PER_IMAGE_NAME 9 //8 for image name, 1 for null terminator
;   15	#define MAX_IMAGES 936 //Max images is this because max combinations of appvars goes up to that
;   16	#define TASKS_TO_FINISH 2
;   17	#define X_MARGIN 8
;   18	#define Y_MARGIN 38
;   19	#define Y_SPACING 25
;   20	#define MAX_THUMBNAIL_WIDTH 160
;   21	#define MAX_THUMBNAIL_HEIGHT 240
;   22	#define THUMBNAIL_ZOOM 0
;   23	
;   24	
;   25	
;   26	
;   27	/* Function Prototyptes */
;   28	void combineSquareID(char *squareName, uint24_t x, uint24_t y, char *id);
;   29	uint8_t databaseReady();
;   30	void DisplayHomeScreen(uint24_t pics);
;   31	void DrawImage(uint24_t picName);
;   32	void noImagesFound();
;   33	void PrintCentered(const char *str);
;   34	void PrintCenteredX(const char *str, uint8_t y);
;   35	void PrintCenteredY(const char *str, uint8_t x);
;   36	void printNames(uint24_t start, char *picNames, uint24_t numOfPics);
;   37	void printText(int8_t xpos, int8_t ypos, const char *text);
;   38	uint24_t rebuildDB(uint8_t p);
;   39	void SplashScreen();
;   40	void SetLoadingBarProgress(uint8_t p, uint8_t t);
;   41	
;   42	/* Main function, called first */
;   43	int main(void)
;   44	{
_main:
	LD	HL,-4
	CALL	__frameset
;   45	  uint8_t ready=0, tasksFinished = 0;
	LD	(IX+-1),0
;   46	  uint24_t picsDetected=0;
	LD	BC,0
	LD	(IX+-4),BC
;   47	  /* Clear the homescreen */
;   48	  //os_ClrHome();
;   49	
;   50	  gfx_Begin();
	CALL	_gfx_Begin
;   51	  ti_CloseAll();
	CALL	_ti_CloseAll
;   52	  SplashScreen();
	CALL	_SplashScreen
;   53	  SetLoadingBarProgress(++tasksFinished, TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   54	  //checks if the database exists and is ready 0 failure; 1 created; 2 exists
;   55	  ready = databaseReady();
	CALL	_databaseReady
	LD	(IX+-1),A
;   56	  if (ready==0)
	OR	A,A
	JR	Z,L_6
;   57	  goto err;
;   58	
;   59	
;   60	  picsDetected=rebuildDB(tasksFinished);
	LD	BC,1
	PUSH	BC
	CALL	_rebuildDB
	POP	BC
	LD	(IX+-4),HL
;   61	  if(picsDetected==0)
	CALL	__icmpzero
	JR	Z,L_6
;   62	  goto err;
;   63	  //returns how many images were found. 0 means quit.
;   64	
;   65	  SetLoadingBarProgress(++tasksFinished,TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   66	  DisplayHomeScreen(picsDetected);
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_DisplayHomeScreen
	POP	BC
;   67	
;   68	  err:
;   69	  /* Waits for a keypress */
;   70	  while (!os_GetCSC());
L_6:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_6
;   71	  ti_CloseAll();
	CALL	_ti_CloseAll
;   72	  gfx_End();
	CALL	_gfx_End
	OR	A,A
;   73	
;   74	  /* Return 0 for success */
;   75	  return 0;
	SBC	HL,HL
;   76	
;   77	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_DisplayHomeScreen                  IMPORT  -----   function
;_rebuildDB                          IMPORT  -----   function
;_databaseReady                      IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;picsDetected                          IX-4      3   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;   78	
;   79	/* Functions */
;   80	
;   81	void DisplayHomeScreen(uint24_t pics){
_DisplayHomeScreen:
	LD	HL,-35
	CALL	__frameset
;   82	  char *picNames = malloc(pics*BYTES_PER_IMAGE_NAME); //BYTES_PER_IMAGE_NAME = 9
	LD	HL,(IX+6)
	LD	A,9
	CALL	__imul_b
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(IX+-9),HL
;   83	  ti_var_t database = ti_Open("HDPICDB","r");
	LD	BC,L__4
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-10),A
;   84	  uint24_t i,startName=0;
	LD	BC,0
	LD	(IX+-3),BC
;   85	  uint8_t Ypos=10;
	LD	(IX+-18),10
;   86	  kb_key_t key = kb_Data[7];
;   87	  bool up,down,left,right;
;   88	
;   89	
;   90	  //makes the screen black and sets text white
;   91	  gfx_FillScreen(0);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   92	  gfx_SetTextFGColor(254);
	LD	BC,254
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   93	  gfx_SetTextBGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   94	  gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   95	  gfx_VertLine(140,20,200);
	LD	BC,200
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;   96	
;   97	
;   98	  //seeks to the first image name
;   99	  ti_Seek(8,SEEK_SET,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  100	  //PrintCenteredX("Test1",30);
;  101	  //loops through every picture that was detected and store the image name to picNames
;  102	  for(i=0;i<=pics;i++){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_12
L_10:
;  103	    ti_Read(&picNames[i * BYTES_PER_IMAGE_NAME],8,1,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	HL,(IX+-6)
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+-9)
	ADD	HL,BC
	PUSH	HL
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  104	    picNames[i * BYTES_PER_IMAGE_NAME + BYTES_PER_IMAGE_NAME - 1] = 0;
	LD	HL,(IX+-6)
	LD	A,9
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+9
	DEC	BC
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(HL),0
;  105	    ti_Seek(8,SEEK_CUR,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  106	    //PrintCenteredX("Test2",40);
;  107	    Ypos+=15;
	LD	A,(IX+-18)
	ADD	A,15
	LD	(IX+-18),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  108	    //PrintCenteredX(&picNames[i*BYTES_PER_IMAGE_NAME],Ypos);
;  109	
;  110	  }
L_12:
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_10
;  111	
;  112	  /* Keypress handler */
;  113	  gfx_SetTextXY(10,10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  114	  printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  115	  DrawImage(startName);
	LD	BC,0
	PUSH	BC
	CALL	_DrawImage
	POP	BC
;  116	  do{
L_33:
;  117	    //scans the keys for keypress
;  118	    kb_Scan();
	CALL	_kb_Scan
;  119	    //checks if up or down arrow key were pressed
;  120	    key = kb_Data[7];
	LD	A,(16056350)
	LD	(IX+-11),A
;  121	    down= key & kb_Down;
	AND	A,1
	LD	(IX+-23),A
;  122	    up  = key & kb_Up;
	LD	A,(IX+-11)
	AND	A,8
	LD	(IX+-22),A
;  123	    //if any key was pressed
;  124	    if(key){
	LD	A,(IX+-11)
	OR	A,A
	JR	Z,L_34
;  125	      /* increases the name to start on and redraws the text */
;  126	      if(down){
	LD	A,(IX+-23)
	OR	A,A
	JR	Z,L_31
;  127	        //PrintCenteredX("DOWN",10);
;  128	        startName++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  129	        //make sure user can't scroll down too far
;  130	        if (startName>(pics-1))//If there's more than 4 images, then handle things normally
	LD	IY,(IX+6)
	LEA	IY,IY+-1
	LD	(IX+-17),IY
	LD	(IX+-26),IY
	LD	BC,(IX+-3)
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_18
;  131	        startName=pics-1;
	LD	BC,(IX+-17)
	LD	(IX+-26),BC
	LD	BC,(IX+-17)
	LD	(IX+-3),BC
L_18:
;  132	        if (startName>pics-1 && pics-1>0) //makes sure user can't scroll too far when there's only 1 image detected
	LD	BC,(IX+-26)
	LD	(IX+-21),BC
	LD	(IX+-32),BC
	LD	BC,(IX+-3)
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_21
	LD	BC,(IX+-21)
	LD	(IX+-32),BC
	LD	BC,(IX+-21)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_21
;  133	        startName=pics;
	LD	BC,(IX+6)
	LD	(IX+-3),BC
L_21:
;  134	        if (startName>pics-2 && pics-2>0) //makes sure user can't scroll too far when there's only 2 images detected
	LD	IY,(IX+6)
	LEA	IY,IY+-2
	LD	(IX+-14),IY
	LD	(IX+-29),IY
	LD	BC,(IX+-3)
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_24
	LD	BC,(IX+-14)
	LD	(IX+-29),BC
	LD	BC,(IX+-14)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_24
;  135	        startName=pics-1;
	LD	BC,(IX+-32)
	LD	(IX+-3),BC
L_24:
;  136	        if (startName>pics-3 && pics-3>0) //makes sure user can't scroll too far when there's only 3 images detected
	LD	IY,(IX+6)
	LEA	IY,IY+-3
	LD	(IX+-35),IY
	LD	BC,(IX+-3)
	LD	HL,(IX+-35)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_25
	LD	BC,(IX+-35)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_25
;  137	        startName=pics-2;
	LD	BC,(IX+-29)
	LD	(IX+-3),BC
L_25:
;  138	        printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  139	        DrawImage(startName);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_DrawImage
	POP	BC
;  140	      }
L_31:
;  141	      //key = kb_Data[3];
;  142	
;  143	      /* decreases the name to start on and redraws the text */
;  144	      if(up){
	LD	A,(IX+-22)
	OR	A,A
	JR	Z,L_34
;  145	        //PrintCenteredX(" UP ",10);
;  146	        startName--;
	LD	IY,(IX+-3)
	LEA	IY,IY+-1
	LD	(IX+-3),IY
;  147	        /*checks if startName underflowed from 0 to 16 million or something.
;  148	        * Whatever the number, it shouldn't be less than the max number of images possible*/
;  149	        if (startName>MAX_IMAGES)
	LD	BC,IY
	LD	HL,936
	OR	A,A
	SBC	HL,BC
	JR	NC,L_29
;  150	        startName=0;
	LD	BC,0
	LD	(IX+-3),BC
L_29:
;  151	        printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  152	        DrawImage(startName);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_DrawImage
	POP	BC
;  153	      }
;  154	    }
;  155	
;  156	
;  157	  }   while(kb_Data[6]!=kb_Clear);
L_34:
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_33
;  158	
;  159	  free(picNames);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_free
	POP	BC
;  160	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DisplayHomeScreen ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_DrawImage                          IMPORT  -----   function
;_printNames                         IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;G_5                                  IX-35      3   variable
;G_4                                  IX-32      3   variable
;G_6                                  IX-29      3   variable
;G_1                                  IX-26      3   variable
;down                                 IX-23      1   variable
;up                                   IX-22      1   variable
;G_2                                  IX-21      3   variable
;Ypos                                 IX-18      1   variable
;G_0                                  IX-17      3   variable
;G_3                                  IX-14      3   variable
;key                                  IX-11      1   variable
;database                             IX-10      1   variable
;picNames                              IX-9      3   variable
;i                                     IX-6      3   variable
;startName                             IX-3      3   variable
;pics                                  IX+6      3   parameter


; Stack Frame Size: 44 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__4:
	DB	"r"
	DB	0
L__5:
	DB	"HDPICDB"
	DB	0
	SEGMENT CODE
;  161	
;  162	/* Draws the image stored in database at position startName.
;  163	* Draws the image at location x,y starting at top left corner.
;  164	* If x=-1 then make image horizontally centered in the screen.
;  165	* If y=-1 then make image vertically centered on the screen.
;  166	* Image will automatically be resized to same aspect ratio so you just set the max width and height (4,3 will fit the screen normally)
;  167	*
;  168	*/
;  169	void DrawImage(uint24_t picName){
_DrawImage:
	LD	HL,-49
	CALL	__frameset
;  170	  ti_var_t database = ti_Open("HDPICDB","r"),squareSlot,palSlot;
	LD	BC,L__20
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-8),A
;  171	
;  172	  char imgWH[6], imgID[2], searchName[8], palName[8];
;  173	  //uint8_t wh=0,wt=0,wo=0,hh=0,ht=0,ho=0;
;  174	  uint24_t i=0,widthSquares=0,heightSquares=0,widthPx=0,heightPx=0,xSquare=0,ySquare=0,xOffsetSquare=0,yOffsetSquare=0;
;  175	  uint16_t *palPtr[256];
;  176	  double scale;
;  177	  gfx_sprite_t *squareImg;
;  178	
;  179	  //seeks past header (8bytes), imgName, and unselected images
;  180	  ti_Seek(16+(16*picName),SEEK_CUR,database);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	HL,(IX+6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  181	  //reads the image letter ID (2 bytes)
;  182	  ti_Read(imgID,2,1,database);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,2
	PUSH	BC
	PEA	IX+-20
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  183	  //reads the image width/height (6 bytes)
;  184	  ti_Read(imgWH,6,1,database);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,6
	PUSH	BC
	PEA	IX+-15
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  185	  //closes database
;  186	  ti_Close(database);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  187	
;  188	  //Converts the width/height from a char array into two integers by converting char into decimal value
;  189	  //then subtracting 48 to get the actuall number.
;  190	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  191	  gfx_PrintStringXY(imgWH,170,10);
	LD	BC,10
	PUSH	BC
	LD	BC,170
	PUSH	BC
	PEA	IX+-15
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  192	
;  193	  widthSquares=(int)imgWH[0]-48+(int)imgWH[1]-48+(int)imgWH[2]-48;
	LD	A,(IX+-15)
	SEXT	HL
	LEA	IY,IX+-15
	LD	A,(IY+1)
	LD	L,(IX+-15)
	LD	IY,HL
	LD	B,A
	SEXT	HL
	LD	L,B
	LEA	BC,IY+-48
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-48
	LEA	HL,IX+-13
	LD	A,(HL)
	LD	D,A
	SEXT	HL
	LD	L,D
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-48
	LD	(IX+-23),BC
;  194	  heightSquares=(int)imgWH[3]-48+(int)imgWH[4]-48+(int)imgWH[5]-48;
	LEA	HL,IX+-12
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	IY,HL
	LEA	BC,IY+-48
	LEA	HL,IX+-11
	LD	A,(HL)
	LD	D,A
	SEXT	HL
	LD	L,D
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+-48
	LEA	HL,IX+-10
	LD	A,(HL)
;  195	  gfx_SetTextScale(1,1);
	LD	DE,1
	LD	HL,1
	LD	(IX+-48),HL	; spill
	LD	(IX+-49),A
	SEXT	HL
	LD	L,(IX+-49)
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+-48
	LD	(IX+-18),IY
	PUSH	DE
	LD	HL,(IX+-48)	; unspill
	PUSH	HL
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  196	  gfx_PrintStringXY("WS",170,60);
	LD	BC,60
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  197	  gfx_SetTextXY(200,60);
	LD	BC,60
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  198	  gfx_PrintUInt(widthSquares,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-23)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  199	  gfx_PrintStringXY("HS",170,70);
	LD	BC,70
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  200	  gfx_SetTextXY(200,70);
	LD	BC,70
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  201	  gfx_PrintUInt(heightSquares,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  202	
;  203	  //makes sure image will fit on screen according to the max width/height provided in the requirements
;  204	  /*if(widthSquares>(mWidth/80){
;  205	  scale=4.0/(double)widthSquares;
;  206	  if(heightSquares*scale>(mHeight/80)){
;  207	  scale = 3.0/(double)heightSquares;
;  208	}
;  209	}else if(heightSquares>3){
;  210	scale = 3.0/(double)heightSquares;
;  211	}
;  212	if (x<0){
;  213	xOffsetSquare = (double)x/80
;  214	}*/
;  215	
;  216	//sets correct palettes the
;  217	sprintf(palName, "HP%.2s0000",imgID);
	PEA	IX+-20
	LD	BC,L__24
	PUSH	BC
	PEA	IX+-42
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  218	palSlot = ti_Open(palName,"r");
	LD	BC,L__25
	PUSH	BC
	PEA	IX+-42
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-7),A
;  219	if (!palSlot){
	OR	A,A
	JR	NZ,L_41
;  220	  PrintCenteredX(palName,120);
	LD	BC,120
	PUSH	BC
	PEA	IX+-42
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  221	  PrintCenteredX(" Palette does not exist!",130);
	LD	BC,130
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  222	  while(!os_GetCSC());
L_38:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_38
;  223	  ti_CloseAll();
	CALL	_ti_CloseAll
;  224	  return;
	JR	L_56
;  225	}
L_41:
;  226	
;  227	ti_Seek(24,SEEK_SET,palSlot);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,24
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  228	squareImg = ti_GetDataPtr(palSlot);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	LD	(IX+-26),HL
;  229	gfx_SetPalette(squareImg,512,0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,(IX+-26)
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  230	
;  231	gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  232	gfx_PrintStringXY("WS",170,60);
	LD	BC,60
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__29
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  233	gfx_SetTextXY(200,60);
	LD	BC,60
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  234	gfx_PrintUInt(widthSquares,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-23)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  235	gfx_PrintStringXY("HS",170,70);
	LD	BC,70
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  236	gfx_SetTextXY(200,70);
	LD	BC,70
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  237	gfx_PrintUInt(heightSquares,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  238	
;  239	for(xSquare=0;xSquare<(widthSquares+1);xSquare++){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_54
L_52:
;  240	  for(ySquare=0;ySquare<(heightSquares+1);ySquare++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_51
L_49:
;  241	    //combineSquareID(&searchName,xSquare, ySquare, &imgID);//combines the separate parts into one name to search for
;  242	    sprintf(searchName, "%.2s%03u%03u",imgID, xSquare, ySquare);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	PEA	IX+-20
	LD	BC,L__31
	PUSH	BC
	PEA	IX+-34
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  243	    gfx_PrintStringXY("XS",170,80);
	LD	BC,80
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  244	    gfx_SetTextXY(200,80);
	LD	BC,80
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  245	    gfx_PrintUInt(xSquare,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  246	    gfx_PrintStringXY("YS",170,90);
	LD	BC,90
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  247	    gfx_SetTextXY(200,90);
	LD	BC,90
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  248	    gfx_PrintUInt(ySquare,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  249	    gfx_PrintStringXY(searchName,200,100+10*ySquare);
	LD	HL,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+100
	PUSH	BC
	LD	BC,200
	PUSH	BC
	PEA	IX+-34
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  250	    //while(!os_GetCSC());
;  251	    //squareSlot = ti_Open(searchName,"r");
;  252	    /*This opens the variable with the name that was just assembled.
;  253	    * It then gets the pointer to that and stores it in a graphics variable
;  254	    */
;  255	    squareSlot = ti_Open(searchName,"r");
	LD	BC,L__34
	PUSH	BC
	PEA	IX+-34
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-9),A
;  256	    if (!squareSlot){
	OR	A,A
	JR	NZ,L_48
;  257	      PrintCenteredX(searchName,120);
	LD	BC,120
	PUSH	BC
	PEA	IX+-34
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  258	      PrintCentered("Square doesn't exist!");
	LD	BC,L__36
	PUSH	BC
	CALL	_PrintCentered
	POP	BC
;  259	      while(!os_GetCSC());
L_45:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_45
;  260	      ti_CloseAll();
	CALL	_ti_CloseAll
;  261	      return;
	JR	L_56
;  262	    }
L_48:
;  263	    ti_Seek(16,SEEK_CUR,squareSlot);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  264	    squareImg = (gfx_sprite_t*)ti_GetDataPtr(squareSlot);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	LD	(IX+-26),HL
;  265	    //displays the image
;  266	    gfx_ScaledSprite_NoClip(squareImg,xSquare*80,ySquare*80,1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	B,(IX+-3)
	LD	C,80
	MLT	BC
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-6)
	LD	A,80
	CALL	__imul_b
	PUSH	HL
	LD	BC,(IX+-26)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  267	    ti_Close(squareSlot);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  268	    //[commandz] you'll want to either ti_Read the sprite out,
;  269	    //or just open the file and use gfx_sprite_t *sprite = (gfx_sprite_t*)ti_GetDataPtr(slot);
;  270	  }
L_51:
	LD	BC,(IX+-18)
	INC	BC
	OR	A,A
	LD	HL,(IX+-3)
	SBC	HL,BC
	JR	C,L_49
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  271	}
L_54:
	LD	BC,(IX+-23)
	INC	BC
	OR	A,A
	LD	HL,(IX+-6)
	SBC	HL,BC
	JR	C,L_52
;  272	ti_Close(palSlot);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  273	}
L_56:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DrawImage ***************************
;Name                         Addr/Register   Size   Type
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_PrintCentered                      IMPORT  -----   function
;_gfx_SetPalette                     IMPORT  -----   function
;_ti_GetDataPtr                      IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_PrintCenteredX                     IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;palName                              IX-42      8   variable
;searchName                           IX-34      8   variable
;squareImg                            IX-26      3   variable
;widthSquares                         IX-23      3   variable
;imgID                                IX-20      2   variable
;heightSquares                        IX-18      3   variable
;imgWH                                IX-15      6   variable
;squareSlot                            IX-9      1   variable
;database                              IX-8      1   variable
;palSlot                               IX-7      1   variable
;xSquare                               IX-6      3   variable
;ySquare                               IX-3      3   variable
;picName                               IX+6      3   parameter


; Stack Frame Size: 58 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__20:
	DB	"r"
	DB	0
L__21:
	DB	"HDPICDB"
	DB	0
L__22:
	DB	"WS"
	DB	0
L__23:
	DB	"HS"
	DB	0
L__24:
	DB	"HP%.2s0000"
	DB	0
L__25:
	DB	"r"
	DB	0
L__27:
	DB	" Palette does not exist!"
	DB	0
L__29:
	DB	"WS"
	DB	0
L__30:
	DB	"HS"
	DB	0
L__31:
	DB	"%.2s%03u%03u"
	DB	0
L__32:
	DB	"XS"
	DB	0
L__33:
	DB	"YS"
	DB	0
L__34:
	DB	"r"
	DB	0
L__36:
	DB	"Square doesn't exist!"
	DB	0
	SEGMENT CODE
;  274	
;  275	void combineSquareID(char *squareName, uint24_t x, uint24_t y, char *id){
_combineSquareID:
	CALL	__frameset0
;  276	  squareName[0]=x/100;
	LD	BC,100
	LD	HL,(IX+9)
	CALL	__idivu
	LD	IY,(IX+6)
	LD	(IY),L
;  277	  squareName[1]=(x/10)-((x/100)*100);
	LD	HL,(IX+9)
	LD	BC,10
	CALL	__idivu
	LD	DE,HL
	LD	HL,(IX+9)
	LD	BC,100
	CALL	__idivu
	LD	A,100
	CALL	__imul_b
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	(IY+1),L
;  278	  squareName[2]=x-((x/10)*10)-((x/100)*100);
	LD	HL,(IX+9)
	LD	BC,100
	CALL	__idivu
	LD	A,100
	CALL	__imul_b
	LD	D,L
	LD	HL,(IX+9)
	LD	BC,10
	CALL	__idivu
	LD	A,10
	CALL	__imul_b
	LD	A,D
	ADD	A,L
	LD	B,A
	LD	A,(IX+9)
	LEA	HL,IY+2
	SUB	A,B
	LD	(HL),A
;  279	  squareName[3]=y/100;
	LD	HL,(IX+12)
	LD	BC,100
	CALL	__idivu
	LD	(IY+3),L
;  280	  squareName[4]=(y/10)-((y/100)*100);
	LD	HL,(IX+12)
	LD	BC,10
	CALL	__idivu
	LD	DE,HL
	LD	HL,(IX+12)
	LD	BC,100
	CALL	__idivu
	LD	A,100
	CALL	__imul_b
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	(IY+4),L
;  281	  squareName[5]=y-((y/10)*10)-((y/100)*100);
	LD	HL,(IX+12)
	LD	BC,100
	CALL	__idivu
	LD	A,100
	CALL	__imul_b
	LD	D,L
	LD	HL,(IX+12)
	LD	BC,10
	CALL	__idivu
	LD	A,10
	CALL	__imul_b
	LD	A,D
	ADD	A,L
	LD	B,A
	LD	A,(IX+12)
	LEA	HL,IY+5
	SUB	A,B
	LD	(HL),A
;  282	  squareName[6]=id[0];
	LD	HL,(IX+15)
	LD	A,(HL)
	LD	(IY+6),A
;  283	  squareName[7]=id[1];
	LD	HL,(IX+15)
	INC	HL
	LD	A,(HL)
	LD	(IY+7),A
;  284	  squareName[8]='\0';
	LEA	HL,IY+8
	LD	(HL),0
;  285	  //return squareName;
;  286	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _combineSquareID ***************************
;Name                         Addr/Register   Size   Type
;id                                   IX+15      3   parameter
;y                                    IX+12      3   parameter
;x                                     IX+9      3   parameter
;squareName                            IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  287	
;  288	/* This UI keeps the user selection in the middle of the screen. */
;  289	void printNames(uint24_t startName, char *picNames, uint24_t numOfPics){
_printNames:
	LD	HL,-12
	CALL	__frameset
;  290	  uint24_t i, Yoffset=0, y=0, curName=0;
	LD	BC,0
	LD	(IX+-12),BC
	LD	(IX+-6),BC
;  291	
;  292	  //clears old text and sets up for new text
;  293	  gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  294	  gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  295	  gfx_FillRectangle_NoClip(0,0,140,240);
	LD	BC,240
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  296	  gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  297	
;  298	  //re-draws UI lines
;  299	  gfx_HorizLine_NoClip(0,120,6);
	LD	BC,6
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  300	  gfx_HorizLine_NoClip(136,120,5);
	LD	BC,5
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,136
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  301	  gfx_HorizLine_NoClip(6,110,130);
	LD	BC,130
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  302	  gfx_HorizLine_NoClip(6,130,130);
	LD	BC,130
	PUSH	BC
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  303	  gfx_VertLine_NoClip(6,110,20);
	LD	BC,20
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  304	  gfx_VertLine_NoClip(136,110,21);
	LD	BC,21
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,136
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  305	
;  306	  /*if the selected start name is under 4, that means we need to start drawing
;  307	  * farther down the screen for the text to go in the right spot */
;  308	  gfx_SetTextXY(200,30);
	LD	BC,30
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  309	  gfx_PrintUInt(startName,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  310	  if(startName<4){
	LD	HL,(IX+6)
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NC,L_59
;  311	    Yoffset = 75 - startName * Y_SPACING;
	LD	HL,(IX+6)
;  312	    startName = 0;
	LD	BC,0
	LD	A,25
	CALL	__imul_b
	LD	DE,HL
	LD	HL,75
	OR	A,A
	SBC	HL,DE
	LD	(IX+-12),HL
	LD	(IX+6),BC
;  313	  }else{
	JR	L_60
L_59:
;  314	    startName-=4;
	LD	IY,(IX+6)
	LEA	IY,IY+-4
	LD	(IX+6),IY
;  315	  }
L_60:
;  316	  curName=startName;
	LD	BC,(IX+6)
	LD	(IX+-9),BC
;  317	
;  318	
;  319	  /* draw the text on the screen. Starts displaying the name at element start
;  320	  * then iterates until out of pics or about to draw off the screen */
;  321	  for(i=0;i<numOfPics && y<180;i++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_66
L_64:
;  322	    //calculates where the text should be drawn
;  323	    y = i * Y_SPACING + Y_MARGIN + Yoffset;
	LD	HL,(IX+-3)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	HL,IY+38
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-6),HL
;  324	
;  325	    /*
;  326	    // debug stuff
;  327	    gfx_SetTextScale(1,1);
;  328	    gfx_SetTextXY(200,10);
;  329	    gfx_PrintUInt(i,3);
;  330	    gfx_SetTextXY(200,20);
;  331	    gfx_PrintUInt(y,3);
;  332	    gfx_SetTextXY(200,40);
;  333	    gfx_PrintUInt(curName,3);
;  334	    gfx_SetTextXY(200,50);
;  335	    gfx_PrintUInt(numOfPics,3);
;  336	    gfx_SetTextScale(2,2);
;  337	    */
;  338	    //Prints out the correct name
;  339	    gfx_PrintStringXY(&picNames[curName++*BYTES_PER_IMAGE_NAME],X_MARGIN,y);
	LD	DE,(IX+-9)
	INC	DE
	LD	BC,(IX+-9)
	LD	(IX+-9),DE
	LD	DE,(IX+-6)
	PUSH	DE
	LD	HL,9
	LD	DE,8
	PUSH	DE
	LD	DE,(IX+9)
	CALL	__imulu
	ADD	HL,DE
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  340	    //while(!os_GetCSC());
;  341	
;  342	  }
L_66:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_67
	LD	BC,180
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_64
L_67:
;  343	  //slows down scrolling speed
;  344	  delay(150);
	LD	BC,150
	PUSH	BC
	CALL	_delay
	POP	BC
;  345	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printNames ***************************
;Name                         Addr/Register   Size   Type
;_delay                              IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;Yoffset                              IX-12      3   variable
;curName                               IX-9      3   variable
;y                                     IX-6      3   variable
;i                                     IX-3      3   variable
;numOfPics                            IX+12      3   parameter
;picNames                              IX+9      3   parameter
;startName                             IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


;  346	
;  347	
;  348	
;  349	/* Rebuilds the database of images on the calculator*/
;  350	uint24_t rebuildDB(uint8_t p){
_rebuildDB:
	LD	HL,-67
	CALL	__frameset
;  351	  char *var_name, *imgInfo[16], nameBuffer[10];
;  352	  uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-11),BC
;  353	  uint24_t imagesFound=0;
	LD	(IX+-4),BC
;  354	  char myData[8]="HDPALV1",names[8];
	LEA	DE,IX+-19
;  355	  ti_var_t database = ti_Open("HDPICDB","w"), palette;
	LD	BC,L__46
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	LD	HL,_0temp69
	LD	BC,8
	LDIR	
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  356	  ti_Write("HDDATV10",8,1,database);//Rewrites the header because w overwrites everything
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  357	
;  358	  //resets splash screen for new loading SetLoadingBarProgress
;  359	  SplashScreen();
	CALL	_SplashScreen
;  360	
;  361	  /*
;  362	  * Searches for palettes. This is a lot easier than searching for every single
;  363	  * image square because there's is guarunteed to only be one palette per image.
;  364	  * The palette containts all the useful information such as the image size and
;  365	  * the two letter ID for each appvar. This makes it easy to find every square via a loop.
;  366	  */
;  367	  while((var_name = ti_DetectVar(&search_pos, "HDPALV10", TI_APPVAR_TYPE)) != NULL) {
	JR	L_70
L_71:
;  368	    //sets progress of how many images were found
;  369	    SetLoadingBarProgress(++imagesFound,MAX_IMAGES);
	LD	BC,(IX+-4)
	INC	BC
	LD	(IX+-4),BC
	LD	BC,168
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  370	    //finds the name, letter ID, and size of entire image this palette belongs to.
;  371	    palette = ti_Open(var_name,"r");
	LD	BC,L__49
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-5),A
;  372	    //seeks past useless info
;  373	    ti_Seek(8,SEEK_CUR,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  374	    ti_Seek(16,SEEK_CUR,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  375	    //reads the important info (16 bytes)
;  376	    ti_Read(&imgInfo,16,1,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  377	    //Writes the info to the database
;  378	    ti_Write(imgInfo,16,1,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  379	    //closes palette for next iteration
;  380	    ti_Close(palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  381	  }
L_70:
	LD	BC,21
	PUSH	BC
	LD	BC,L__50
	PUSH	BC
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	CALL	__icmpzero
	JR	NZ,L_71
;  382	  //closes the database
;  383	  ti_Close(database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  384	  gfx_End();
	CALL	_gfx_End
;  385	  ti_SetArchiveStatus(true,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;  386	  gfx_Begin();
	CALL	_gfx_Begin
;  387	  SplashScreen();
	CALL	_SplashScreen
;  388	  gfx_SetTextXY(100,195);
	LD	BC,195
	PUSH	BC
	LD	BC,100
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  389	  gfx_PrintUInt(imagesFound,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  390	  if (imagesFound==0){
	LD	HL,(IX+-4)
	CALL	__icmpzero
	JR	NZ,L_74
;  391	    noImagesFound();
	CALL	_noImagesFound
;  392	  }
L_74:
;  393	  SetLoadingBarProgress(++p,TASKS_TO_FINISH);
	INC	(IX+6)
	LD	BC,2
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  394	
;  395	
;  396	
;  397	  return imagesFound;
	LD	HL,(IX+-4)
;  398	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rebuildDB ***************************
;Name                         Addr/Register   Size   Type
;_noImagesFound                      IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_0temp69                            STATIC      8   variable
;imgInfo                              IX-67     48   variable
;myData                               IX-19      8   variable
;search_pos                           IX-11      3   variable
;var_name                              IX-8      3   variable
;palette                               IX-5      1   variable
;imagesFound                           IX-4      3   variable
;database                              IX-1      1   variable
;p                                     IX+6      1   parameter


; Stack Frame Size: 76 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__46:
	DB	"w"
	DB	0
L__47:
	DB	"HDPICDB"
	DB	0
L__48:
	DB	"HDDATV10"
	DB	0
L__49:
	DB	"r"
	DB	0
L__50:
	DB	"HDPALV10"
	DB	0
	SEGMENT TEXT
_0temp69:
	DB	72
	DB	68
	DB	80
	DB	65
	DB	76
	DB	86
	DB	49
	DB	0
	SEGMENT CODE
;  399	
;  400	void noImagesFound(){
_noImagesFound:
;  401	  gfx_SetTextFGColor(192);
	LD	BC,192
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  402	  PrintCenteredX("No Pictures Detected!",1);
	LD	BC,1
	PUSH	BC
	LD	BC,L__54
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  403	  gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  404	  PrintCenteredX("Convert some images and send them to your",11);
	LD	BC,11
	PUSH	BC
	LD	BC,L__55
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  405	  PrintCenteredX("calculator using the HDpic converter!",21);
	LD	BC,21
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  406	  PrintCenteredX("Tutorial:  https://youtu.be/s1-g8oSueQg",31);
	LD	BC,31
	PUSH	BC
	LD	BC,L__57
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  407	  PrintCenteredX("Press any key to quit",41);
	LD	BC,41
	PUSH	BC
	LD	BC,L__58
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  408	  return;
;  409	}
	RET	


;**************************** _noImagesFound ***************************
;Name                         Addr/Register   Size   Type
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__54:
	DB	"No Pictures Detected!"
	DB	0
L__55:
	DB	"Convert some images and send them to your"
	DB	0
L__56:
	DB	"calculator using the HDpic converter!"
	DB	0
L__57:
	DB	"Tutorial:  https://youtu.be/s1-g8oSueQg"
	DB	0
L__58:
	DB	"Press any key to quit"
	DB	0
	SEGMENT CODE
;  410	
;  411	//checks if the database is already created. If not, it creates it.
;  412	uint8_t databaseReady(){
_databaseReady:
	LD	HL,-27
	CALL	__frameset
;  413	  char *var_name;
;  414	  uint8_t *search_pos = NULL, exists=0, ready = 0;
	LD	BC,0
	LD	(IX+-6),BC
	LD	(IX+-3),0
;  415	  ti_var_t myAppVar;
;  416	  char myData[9]="HDDATV10"; //remember have one more space than text you're saving
	LEA	DE,IX+-18
	LD	HL,_1temp77
	LD	BC,9
	LDIR	
;  417	  char compare[9]="HDDATV10";
	LEA	DE,IX+-27
	LD	HL,_2temp78
	LD	BC,9
	LDIR	
;  418	  //tries to find database using known header
;  419	  while((var_name = ti_DetectVar(&search_pos, myData, TI_APPVAR_TYPE)) != NULL) {
	JR	L_79
L_80:
;  420	    exists=1;
	LD	(IX+-3),1
;  421	  }
L_79:
	LD	BC,21
	PUSH	BC
	PEA	IX+-18
	PEA	IX+-6
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
	CALL	__icmpzero
	JR	NZ,L_80
;  422	  //if file already exists, simply return
;  423	  if (exists == 1)
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_92
;  424	  ready = 2;
	LD	(IX+-1),2
;  425	  else{
	JR	L_94
L_92:
;  426	    //if file doesn't already exist, create it.
;  427	    //creates the database appvar and writes the header. Checks if wrote successfuly
;  428	    myAppVar=ti_Open("HDPICDB", "w");
	LD	BC,L__62
	PUSH	BC
	LD	BC,L__63
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-2),A
;  429	    if(!myAppVar)
;  430	    ready = 3;
;  431	    if(ti_Write(&myData,8,1,myAppVar)!=1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  432	    ready = 4;
;  433	    if (ti_Rewind(myAppVar) == EOF)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  434	    ready = 5;
;  435	    if (ti_Read(&myData,8, 1, myAppVar) != 1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  436	    ready = 6;
;  437	    if (strcmp(myData,compare)!=0)
	PEA	IX+-27
	PEA	IX+-18
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_89
;  438	    ready = 7;
	LD	(IX+-1),7
;  439	    else{
	JR	L_94
L_89:
;  440	      ready = 1;
	LD	(IX+-1),1
;  441	    }
;  442	  }
L_94:
;  443	  ti_CloseAll();
	CALL	_ti_CloseAll
;  444	
;  445	  //checks what happened
;  446	  if(ready==1){
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_98
;  447	    gfx_SetTextFGColor(195);
	LD	BC,195
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  448	    PrintCenteredX("created",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__70
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  449	    return 1;
	LD	A,1
	JR	L_99
;  450	  }else if(ready==2){
L_98:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_96
;  451	    gfx_SetTextFGColor(004);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  452	    PrintCenteredX("exists",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  453	    return 2;
	LD	A,2
	JR	L_99
;  454	  }else{
L_96:
;  455	    gfx_SetTextFGColor(224);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  456	    PrintCenteredX("failure",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  457	    gfx_SetTextXY(120,190);
	LD	BC,190
	PUSH	BC
	LD	BC,120
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  458	    gfx_PrintUInt(ready,1);
	LD	BC,1
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  459	    return 0;
	XOR	A,A
;  460	  }
;  461	
;  462	
;  463	}
L_99:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _databaseReady ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_2temp78                            STATIC      9   variable
;_1temp77                            STATIC      9   variable
;compare                              IX-27      9   variable
;myData                               IX-18      9   variable
;var_name                              IX-9      3   variable
;search_pos                            IX-6      3   variable
;exists                                IX-3      1   variable
;myAppVar                              IX-2      1   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 33 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__62:
	DB	"w"
	DB	0
L__63:
	DB	"HDPICDB"
	DB	0
L__70:
	DB	"created"
	DB	0
L__72:
	DB	"exists"
	DB	0
L__73:
	DB	"failure"
	DB	0
	SEGMENT TEXT
_1temp77:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
_2temp78:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
	SEGMENT CODE
;  464	
;  465	//makes a loading bar and fills it in depending on progress made (p) / tasks left (t)
;  466	void SetLoadingBarProgress(uint8_t p, uint8_t t){
_SetLoadingBarProgress:
	LD	HL,-4
	CALL	__frameset
;  467	  p=((double)p/(double)t)*200.0;
	UEXT	HL
	LD	L,(IX+6)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	(IX+-1),A
	UEXT	HL
	LD	L,(IX+9)
	LD	A,H
	LD	(IX+-4),BC
	LD	BC,HL
	CALL	__ultof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	HL,4718592
	LD	E,67
	CALL	__fmul
	CALL	__ftol
	LD	(IX+6),C
;  468	  //ensures loading bar doesn't go past max point
;  469	  if (p>200)
	LD	A,200
	CP	A,(IX+6)
	JR	NC,L_101
;  470	  p=200;
	LD	(IX+6),200
L_101:
;  471	
;  472	  gfx_SetColor(128);
	LD	BC,128
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  473	  gfx_FillRectangle_NoClip(60,153,(uint8_t)p,7);
	LD	BC,7
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,153
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  474	
;  475	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetLoadingBarProgress ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;t                                     IX+9      1   parameter
;p                                     IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  476	
;  477	//creates a simple splash screen when program starts
;  478	void SplashScreen(){
_SplashScreen:
;  479	  //sets color to grey
;  480	  gfx_SetColor(181);
	LD	BC,181
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  481	  gfx_FillRectangle_NoClip(60,80,LCD_WIDTH-120,LCD_HEIGHT-160);
	LD	BC,80
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  482	  /* Print a string */
;  483	  PrintCentered("HD Picture Viewer");
	LD	BC,L__77
	PUSH	BC
	CALL	_PrintCentered
	POP	BC
;  484	}
	RET	


;**************************** _SplashScreen ***************************
;Name                         Addr/Register   Size   Type
;_PrintCentered                      IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__77:
	DB	"HD Picture Viewer"
	DB	0
	SEGMENT CODE
;  485	
;  486	/* Prints a screen centered string */
;  487	void PrintCentered(const char *str)
;  488	{
_PrintCentered:
	CALL	__frameset0
;  489	  gfx_PrintStringXY(str,(LCD_WIDTH - gfx_GetStringWidth(str)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  490	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  491	/* Prints a X centered string */
;  492	void PrintCenteredX(const char *str, uint8_t y)
;  493	{
_PrintCenteredX:
	CALL	__frameset0
;  494	  gfx_PrintStringXY(str, (LCD_WIDTH - gfx_GetStringWidth(str)) / 2, y);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  495	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredX ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;y                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  496	/* Prints a Y centered string */
;  497	void PrintCenteredY(const char *str, uint8_t x)
;  498	{
_PrintCenteredY:
	CALL	__frameset0
;  499	  gfx_PrintStringXY(str, x, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  500	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredY ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;x                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  501	
;  502	
;  503	/* Draw text on the homescreen at the given X/Y location */
;  504	void printText(int8_t xpos, int8_t ypos, const char *text) {
_printText:
	CALL	__frameset0
;  505	  os_SetCursorPos(ypos, xpos);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  506	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  507	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;ypos                                  IX+9      1   parameter
;xpos                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strcmp:ROM
	XREF _sprintf:ROM
	XREF _ti_GetDataPtr:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Close:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _delay:ROM
	XREF __idivu:ROM
	XREF __imulu:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishru_b:ROM
	XDEF _printText
	XDEF _PrintCenteredY
	XDEF _PrintCenteredX
	XDEF _PrintCentered
	XDEF _SplashScreen
	XDEF _SetLoadingBarProgress
	XDEF _databaseReady
	XDEF _noImagesFound
	XDEF _rebuildDB
	XDEF _printNames
	XDEF _combineSquareID
	XDEF _DrawImage
	XDEF _DisplayHomeScreen
	XDEF _main
	END
