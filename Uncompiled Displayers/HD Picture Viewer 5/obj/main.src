; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <tice.h>
;    2	
;    3	#include <graphx.h>
;    4	#include <stdbool.h>
;    5	#include <stddef.h>
;    6	#include <stdint.h>
;    7	
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include <fileioc.h>
;   13	
;   14	/* globals */
;   15	#define TASKS_TO_FINISH 3
;   16	
;   17	/* Function Prototyptes */
;   18	uint8_t databaseReady();
;   19	void PrintCentered(const char *str);
;   20	void PrintCenteredX(const char *str, uint8_t y);
;   21	void PrintCenteredY(const char *str, uint8_t x);
;   22	void printText(int8_t xpos, int8_t ypos, const char *text);
;   23	uint24_t rebuildDB(uint8_t p);
;   24	void SplashScreen();
;   25	void noImagesFound();
;   26	void SetLoadingBarProgress(uint8_t p, uint8_t t);
;   27	
;   28	/* Main function, called first */
;   29	int main(void)
;   30	{
_main:
	LD	HL,-1
	CALL	__frameset
;   31	  uint8_t ready=0, tasksFinished = 0;
	LD	(IX+-1),0
;   32	  /* Clear the homescreen */
;   33	  //os_ClrHome();
;   34	
;   35	  gfx_Begin();
	CALL	_gfx_Begin
;   36	  ti_CloseAll();
	CALL	_ti_CloseAll
;   37	
;   38	  SplashScreen();
	CALL	_SplashScreen
;   39	  SetLoadingBarProgress(++tasksFinished, TASKS_TO_FINISH);
	LD	BC,3
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   40	  //checks if the database exists and is ready 0 failure; 1 created; 2 exists
;   41	  ready = databaseReady();
	CALL	_databaseReady
	LD	(IX+-1),A
;   42	  if (ready==0)
	OR	A,A
	JR	Z,L_9
;   43	  goto err;
;   44	  //else if (ready ==1)
;   45	  //returns how many images were found. 0 means quit.
;   46	  if(rebuildDB(tasksFinished)==0)
	LD	BC,1
	PUSH	BC
	CALL	_rebuildDB
	POP	BC
	CALL	__icmpzero
	JR	Z,L_9
;   47	  goto err;
;   48	
;   49	  SetLoadingBarProgress(++tasksFinished,TASKS_TO_FINISH);
	LD	BC,3
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   50	
;   51	
;   52	  /* Waits for a keypress */
;   53	  while (!os_GetCSC());
L_6:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_6
;   54	  ti_CloseAll();
	CALL	_ti_CloseAll
;   55	  gfx_End();
	CALL	_gfx_End
	OR	A,A
;   56	
;   57	  /* Return 0 for success */
;   58	  return 0;
	SBC	HL,HL
	JR	L_11
;   59	
;   60	  err:
;   61	  while (!os_GetCSC());
L_9:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_9
;   62	  ti_CloseAll();
	CALL	_ti_CloseAll
;   63	  gfx_End();
	CALL	_gfx_End
;   64	  return 1;
	LD	HL,1
;   65	}
L_11:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_rebuildDB                          IMPORT  -----   function
;_databaseReady                      IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;ready                                 IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


;   66	
;   67	
;   68	/* Functions */
;   69	uint24_t rebuildDB(uint8_t p){
_rebuildDB:
	LD	HL,-22
	CALL	__frameset
;   70	  char *var_name, *imgInfo, nameBuffer[10];
;   71	  uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-11),BC
;   72	  uint24_t imagesFound=0;
	LD	(IX+-3),BC
;   73	  char myData[8]="HDPALV1",names[8];
	LEA	DE,IX+-22
;   74	  ti_var_t database = ti_Open("HDPICDB","a"), palette;
	LD	BC,L__5
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	LD	HL,_0temp12
	LD	BC,8
	LDIR	
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-5),A
;   75	  /*
;   76	  * Searches for palettes. This is a lot easier than searching for every single
;   77	  * image square because there's is guarunteed to only be one palette per image.
;   78	  * The palette containts all the useful information such as the image size and
;   79	  * the two letter ID for each appvar. This makes it easy to find every square via a loop.
;   80	  */
;   81	  while((var_name = ti_DetectVar(&search_pos, "HDPALV10", TI_APPVAR_TYPE)) != NULL) {
	JR	L_14
L_15:
;   82	    //writes appvar name to db
;   83	    ti_Write(&var_name,8,1,database);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-8
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   84	    imagesFound++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   85	    //find the name, letter ID, and size of entire image this palette belongs to.
;   86	    palette = ti_Open(var_name,"r");
	LD	BC,L__7
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;   87	    ti_Seek(8,SEEK_CUR,palette);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;   88	    ti_Read(&imgInfo,16,1,palette);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-14
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   89	    ti_Write(&imgInfo,16,1,palette);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-14
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   90	    ti_Close(palette);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;   91	  }
L_14:
	LD	BC,21
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	CALL	__icmpzero
	JR	NZ,L_15
;   92	  //closes the database
;   93	
;   94	  ti_Close(database);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;   95	  gfx_SetTextXY(20,10);
	LD	BC,10
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   96	  gfx_PrintUInt(imagesFound,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;   97	  if (imagesFound==0){
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L_18
;   98	    noImagesFound();
	CALL	_noImagesFound
;   99	  }
L_18:
;  100	
;  101	  SetLoadingBarProgress(++p,TASKS_TO_FINISH);
	INC	(IX+6)
	LD	BC,3
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  102	  return imagesFound;
	LD	HL,(IX+-3)
;  103	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rebuildDB ***************************
;Name                         Addr/Register   Size   Type
;_SetLoadingBarProgress              IMPORT  -----   function
;_noImagesFound                      IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_0temp12                            STATIC      8   variable
;myData                               IX-22      8   variable
;imgInfo                              IX-14      3   variable
;search_pos                           IX-11      3   variable
;var_name                              IX-8      3   variable
;database                              IX-5      1   variable
;palette                               IX-4      1   variable
;imagesFound                           IX-3      3   variable
;p                                     IX+6      1   parameter


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__5:
	DB	"a"
	DB	0
L__6:
	DB	"HDPICDB"
	DB	0
L__7:
	DB	"r"
	DB	0
L__8:
	DB	"HDPALV10"
	DB	0
	SEGMENT TEXT
_0temp12:
	DB	72
	DB	68
	DB	80
	DB	65
	DB	76
	DB	86
	DB	49
	DB	0
	SEGMENT CODE
;  104	
;  105	void noImagesFound(){
_noImagesFound:
;  106	  gfx_SetTextFGColor(192);
	LD	BC,192
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  107	  PrintCenteredX("No Pictures Detected!",1);
	LD	BC,1
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  108	  gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  109	  PrintCenteredX("Convert some images and send them to your",11);
	LD	BC,11
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  110	  PrintCenteredX("calculator using the HDpic converter!",21);
	LD	BC,21
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  111	  PrintCenteredX("Tutorial:  https://youtu.be/s1-g8oSueQg",31);
	LD	BC,31
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  112	  PrintCenteredX("Press any key to quit",41);
	LD	BC,41
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  113	  return;
;  114	}
	RET	


;**************************** _noImagesFound ***************************
;Name                         Addr/Register   Size   Type
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"No Pictures Detected!"
	DB	0
L__13:
	DB	"Convert some images and send them to your"
	DB	0
L__14:
	DB	"calculator using the HDpic converter!"
	DB	0
L__15:
	DB	"Tutorial:  https://youtu.be/s1-g8oSueQg"
	DB	0
L__16:
	DB	"Press any key to quit"
	DB	0
	SEGMENT CODE
;  115	
;  116	//checks if the database is already created. If not, it creates it.
;  117	uint8_t databaseReady(){
_databaseReady:
	LD	HL,-25
	CALL	__frameset
;  118	  char *var_name;
;  119	  uint8_t *search_pos = NULL, exists=0, ready = 0;
	LD	BC,0
	LD	(IX+-6),BC
	LD	(IX+-3),0
;  120	  ti_var_t myAppVar;
;  121	  char myData[8]="HDDATV10"; //remember have one more space than text you're saving
	LEA	DE,IX+-17
	LD	HL,_1temp21
	LD	BC,8
	LDIR	
;  122	  char compare[8]="HDDATV10";
	LEA	DE,IX+-25
	LD	HL,_2temp22
	LD	BC,8
	LDIR	
;  123	  //tries to find database using known header
;  124	  while((var_name = ti_DetectVar(&search_pos, myData, TI_APPVAR_TYPE)) != NULL) {
	JR	L_23
L_24:
;  125	    exists=1;
	LD	(IX+-3),1
;  126	  }
L_23:
	LD	BC,21
	PUSH	BC
	PEA	IX+-17
	PEA	IX+-6
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
	CALL	__icmpzero
	JR	NZ,L_24
;  127	  //if file already exists, simply return
;  128	  if (exists == 1)
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_36
;  129	  ready = 2;
	LD	(IX+-1),2
;  130	  else{
	JR	L_38
L_36:
;  131	    //if file doesn't already exist, create it.
;  132	    //creates the database appvar and writes the header. Checks if wrote successfuly
;  133	    myAppVar=ti_Open("HDPICDB", "w");
	LD	BC,L__20
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-2),A
;  134	    if(!myAppVar)
;  135	    ready = 0;
;  136	    if(ti_Write(&myData,sizeof(myData),1,myAppVar)!=1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-17
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  137	    ready = 0;
;  138	    if (ti_Rewind(myAppVar) == EOF)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  139	    ready = 0;
;  140	    if (ti_Read(&myData, sizeof(myData), 1, myAppVar) != 1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-17
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  141	    ready = 0;
;  142	    if (strcmp(myData,compare)!=0)
	PEA	IX+-25
	PEA	IX+-17
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_33
;  143	    ready = 0;
	LD	(IX+-1),0
;  144	    else{
	JR	L_38
L_33:
;  145	      ready = 1;
	LD	(IX+-1),1
;  146	    }
;  147	  }
L_38:
;  148	  ti_CloseAll();
	CALL	_ti_CloseAll
;  149	
;  150	  //checks what happened
;  151	  if(ready==1){
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_42
;  152	    gfx_SetTextFGColor(195);
	LD	BC,195
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  153	    PrintCenteredX("created",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  154	    return 1;
	LD	A,1
	JR	L_43
;  155	  }else if(ready==2){
L_42:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_40
;  156	    gfx_SetTextFGColor(004);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  157	    PrintCenteredX("exists",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  158	    return 2;
	LD	A,2
	JR	L_43
;  159	  }else{
L_40:
;  160	    gfx_SetTextFGColor(224);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  161	    PrintCenteredX("failure",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  162	    return 0;
	XOR	A,A
;  163	  }
;  164	
;  165	
;  166	}
L_43:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _databaseReady ***************************
;Name                         Addr/Register   Size   Type
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_2temp22                            STATIC      8   variable
;_1temp21                            STATIC      8   variable
;compare                              IX-25      8   variable
;myData                               IX-17      8   variable
;var_name                              IX-9      3   variable
;search_pos                            IX-6      3   variable
;exists                                IX-3      1   variable
;myAppVar                              IX-2      1   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__20:
	DB	"w"
	DB	0
L__21:
	DB	"HDPICDB"
	DB	0
L__28:
	DB	"created"
	DB	0
L__30:
	DB	"exists"
	DB	0
L__31:
	DB	"failure"
	DB	0
	SEGMENT TEXT
_1temp21:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
_2temp22:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	SEGMENT CODE
;  167	
;  168	//makes a loading bar and fills it in depending on progress made (p) / tasks left (t)
;  169	void SetLoadingBarProgress(uint8_t p, uint8_t t){
_SetLoadingBarProgress:
	LD	HL,-4
	CALL	__frameset
;  170	  p=((double)p/(double)t)*200.0;
	UEXT	HL
	LD	L,(IX+6)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	(IX+-1),A
	UEXT	HL
	LD	L,(IX+9)
	LD	A,H
	LD	(IX+-4),BC
	LD	BC,HL
	CALL	__ultof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	HL,4718592
	LD	E,67
	CALL	__fmul
	CALL	__ftol
	LD	(IX+6),C
;  171	  //ensures loading bar doesn't go past max point
;  172	  if (p>200)
	LD	A,200
	CP	A,(IX+6)
	JR	NC,L_45
;  173	  p=200;
	LD	(IX+6),200
L_45:
;  174	
;  175	  gfx_SetColor(128);
	LD	BC,128
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  176	  gfx_FillRectangle_NoClip(60,153,(uint8_t)p,7);
	LD	BC,7
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,153
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  177	
;  178	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetLoadingBarProgress ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;t                                     IX+9      1   parameter
;p                                     IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  179	
;  180	//creates a simple splash screen when program starts
;  181	void SplashScreen(){
_SplashScreen:
;  182	  //sets color to grey
;  183	  gfx_SetColor(181);
	LD	BC,181
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  184	  gfx_FillRectangle_NoClip(60,80,LCD_WIDTH-120,LCD_HEIGHT-160);
	LD	BC,80
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  185	  /* Print a string */
;  186	  PrintCentered("HD Picture Viewer");
	LD	BC,L__35
	PUSH	BC
	CALL	_PrintCentered
	POP	BC
;  187	}
	RET	


;**************************** _SplashScreen ***************************
;Name                         Addr/Register   Size   Type
;_PrintCentered                      IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__35:
	DB	"HD Picture Viewer"
	DB	0
	SEGMENT CODE
;  188	
;  189	/* Prints a screen centered string */
;  190	void PrintCentered(const char *str)
;  191	{
_PrintCentered:
	CALL	__frameset0
;  192	  gfx_PrintStringXY(str,(LCD_WIDTH - gfx_GetStringWidth(str)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  193	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  194	/* Prints a X centered string */
;  195	void PrintCenteredX(const char *str, uint8_t y)
;  196	{
_PrintCenteredX:
	CALL	__frameset0
;  197	  gfx_PrintStringXY(str, (LCD_WIDTH - gfx_GetStringWidth(str)) / 2, y);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  198	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredX ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;y                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  199	/* Prints a Y centered string */
;  200	void PrintCenteredY(const char *str, uint8_t x)
;  201	{
_PrintCenteredY:
	CALL	__frameset0
;  202	  gfx_PrintStringXY(str, x, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  203	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredY ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;x                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  204	
;  205	
;  206	/* Draw text on the homescreen at the given X/Y location */
;  207	void printText(int8_t xpos, int8_t ypos, const char *text) {
_printText:
	CALL	__frameset0
;  208	  os_SetCursorPos(ypos, xpos);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  209	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  210	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;ypos                                  IX+9      1   parameter
;xpos                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strcmp:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Close:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _printText
	XDEF _PrintCenteredY
	XDEF _PrintCenteredX
	XDEF _PrintCentered
	XDEF _SplashScreen
	XDEF _SetLoadingBarProgress
	XDEF _databaseReady
	XDEF _noImagesFound
	XDEF _rebuildDB
	XDEF _main
	END
