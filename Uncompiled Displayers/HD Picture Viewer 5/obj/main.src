; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <tice.h>
;    2	#include <graphx.h>
;    3	#include <keypadc.h>
;    4	#include <stdbool.h>
;    5	#include <stddef.h>
;    6	#include <stdint.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	#include <fileioc.h>
;   11	
;   12	/* globals */
;   13	
;   14	#define BYTES_PER_IMAGE_NAME 9 //8 for image name, 1 for null terminator
;   15	#define MAX_IMAGES 936 //Max images is this because max combinations of appvars goes up to that
;   16	#define TASKS_TO_FINISH 2
;   17	#define X_MARGIN 8
;   18	#define Y_MARGIN 38
;   19	#define Y_SPACING 25
;   20	
;   21	
;   22	
;   23	/* Function Prototyptes */
;   24	uint8_t databaseReady();
;   25	void DisplayHomeScreen(uint24_t pics);
;   26	void noImagesFound();
;   27	void PrintCentered(const char *str);
;   28	void PrintCenteredX(const char *str, uint8_t y);
;   29	void PrintCenteredY(const char *str, uint8_t x);
;   30	void printNames(uint24_t start, char *picNames, uint24_t numOfPics);
;   31	void printText(int8_t xpos, int8_t ypos, const char *text);
;   32	uint24_t rebuildDB(uint8_t p);
;   33	void SplashScreen();
;   34	void SetLoadingBarProgress(uint8_t p, uint8_t t);
;   35	
;   36	/* Main function, called first */
;   37	int main(void)
;   38	{
_main:
	LD	HL,-4
	CALL	__frameset
;   39	  uint8_t ready=0, tasksFinished = 0;
	LD	(IX+-1),0
;   40	  uint24_t picsDetected=0;
	LD	BC,0
	LD	(IX+-4),BC
;   41	  /* Clear the homescreen */
;   42	  //os_ClrHome();
;   43	
;   44	  gfx_Begin();
	CALL	_gfx_Begin
;   45	  ti_CloseAll();
	CALL	_ti_CloseAll
;   46	  SplashScreen();
	CALL	_SplashScreen
;   47	  SetLoadingBarProgress(++tasksFinished, TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   48	  //checks if the database exists and is ready 0 failure; 1 created; 2 exists
;   49	  ready = databaseReady();
	CALL	_databaseReady
	LD	(IX+-1),A
;   50	  if (ready==0)
	OR	A,A
	JR	Z,L_6
;   51	  goto err;
;   52	
;   53	
;   54	  picsDetected=rebuildDB(tasksFinished);
	LD	BC,1
	PUSH	BC
	CALL	_rebuildDB
	POP	BC
	LD	(IX+-4),HL
;   55	  if(picsDetected==0)
	CALL	__icmpzero
	JR	Z,L_6
;   56	  goto err;
;   57	  //returns how many images were found. 0 means quit.
;   58	
;   59	  SetLoadingBarProgress(++tasksFinished,TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   60	  DisplayHomeScreen(picsDetected);
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_DisplayHomeScreen
	POP	BC
;   61	
;   62	  err:
;   63	  /* Waits for a keypress */
;   64	  while (!os_GetCSC());
L_6:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_6
;   65	  ti_CloseAll();
	CALL	_ti_CloseAll
;   66	  gfx_End();
	CALL	_gfx_End
	OR	A,A
;   67	
;   68	  /* Return 0 for success */
;   69	  return 0;
	SBC	HL,HL
;   70	
;   71	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_DisplayHomeScreen                  IMPORT  -----   function
;_rebuildDB                          IMPORT  -----   function
;_databaseReady                      IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;picsDetected                          IX-4      3   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;   72	
;   73	/* Functions */
;   74	
;   75	void DisplayHomeScreen(uint24_t pics){
_DisplayHomeScreen:
	LD	HL,-20
	CALL	__frameset
;   76	  char *picNames = malloc(pics*BYTES_PER_IMAGE_NAME); //BYTES_PER_IMAGE_NAME = 9
	LD	HL,(IX+6)
	LD	A,9
	CALL	__imul_b
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(IX+-9),HL
;   77	  ti_var_t database = ti_Open("HDPICDB","r");
	LD	BC,L__4
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-10),A
;   78	  uint24_t i,startName=0;
	LD	BC,0
	LD	(IX+-3),BC
;   79	  uint8_t Ypos=10;
	LD	(IX+-12),10
;   80	  kb_key_t key = kb_Data[7];
;   81	  bool up,down,left,right;
;   82	
;   83	
;   84	  //makes the screen black and text white
;   85	  gfx_FillScreen(0);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   86	  gfx_SetTextFGColor(254);
	LD	BC,254
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   87	  gfx_SetTextBGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   88	  gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   89	  gfx_VertLine(140,20,200);
	LD	BC,200
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,140
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;   90	
;   91	
;   92	  //seeks to the first image name
;   93	  ti_Seek(8,SEEK_SET,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;   94	  //PrintCenteredX("Test1",30);
;   95	  //loops through every picture that was detected and store the image name to picNames
;   96	  for(i=0;i<=pics;i++){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_12
L_10:
;   97	    ti_Read(&picNames[i * BYTES_PER_IMAGE_NAME],8,1,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	HL,(IX+-6)
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+-9)
	ADD	HL,BC
	PUSH	HL
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   98	    picNames[i * BYTES_PER_IMAGE_NAME + BYTES_PER_IMAGE_NAME - 1] = 0;
	LD	HL,(IX+-6)
	LD	A,9
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+9
	DEC	BC
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(HL),0
;   99	    ti_Seek(16,SEEK_CUR,database);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  100	    //PrintCenteredX("Test2",40);
;  101	    Ypos+=15;
	LD	A,(IX+-12)
	ADD	A,15
	LD	(IX+-12),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  102	    //PrintCenteredX(&picNames[i*BYTES_PER_IMAGE_NAME],Ypos);
;  103	
;  104	  }
L_12:
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_10
;  105	
;  106	  /* Keypress handler */
;  107	  gfx_SetTextXY(10,10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  108	  printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  109	  do{
L_28:
;  110	    //scans the keys for keypress
;  111	    kb_Scan();
	CALL	_kb_Scan
;  112	    //checks if up or down arrow key were pressed
;  113	    key = kb_Data[7];
	LD	A,(16056350)
	LD	(IX+-11),A
;  114	    down= key & kb_Down;
	AND	A,1
	LD	(IX+-17),A
;  115	    up  = key & kb_Up;
	LD	A,(IX+-11)
	AND	A,8
	LD	(IX+-16),A
;  116	    //if any key was pressed
;  117	    if(key){
	LD	A,(IX+-11)
	OR	A,A
	JR	Z,L_29
;  118	      /* increases the name to start on and redraws the text */
;  119	      if(down){
	LD	A,(IX+-17)
	OR	A,A
	JR	Z,L_26
;  120	        //PrintCenteredX("DOWN",10);
;  121	        startName++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  122	        if (startName>(pics-1) && pics<3)
	LD	IY,(IX+6)
	LEA	IY,IY+-1
	LD	(IX+-20),IY
	LD	BC,(IX+-3)
	LD	HL,(IX+-20)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_19
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_19
;  123	        startName=pics-1;
	LD	BC,(IX+-20)
	LD	(IX+-3),BC
L_19:
;  124	        if (startName>pics-3 && pics-3>=0) //makes sure user can't scroll too far
	LD	IY,(IX+6)
	LEA	IY,IY+-3
	LD	(IX+-15),IY
	LD	BC,(IX+-3)
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_20
	LD	HL,(IX+-15)
	CALL	__icmpzero
	JR	C,L_20
;  125	        startName=pics-3;
	LD	BC,(IX+-15)
	LD	(IX+-3),BC
L_20:
;  126	        printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  127	      }
L_26:
;  128	      //key = kb_Data[3];
;  129	
;  130	      /* decreases the name to start on and redraws the text */
;  131	      if(up){
	LD	A,(IX+-16)
	OR	A,A
	JR	Z,L_29
;  132	        //PrintCenteredX(" UP ",10);
;  133	        startName--;
	LD	IY,(IX+-3)
	LEA	IY,IY+-1
	LD	(IX+-3),IY
;  134	        if (startName>MAX_IMAGES) //checks if startName underflowed from 0 to 16 million or something
	LD	BC,IY
	LD	HL,936
	OR	A,A
	SBC	HL,BC
	JR	NC,L_24
;  135	        startName=0;
	LD	BC,0
	LD	(IX+-3),BC
L_24:
;  136	        printNames(startName, picNames, pics);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_printNames
	POP	BC
	POP	BC
	POP	BC
;  137	      }
;  138	    }
;  139	
;  140	
;  141	  }   while(kb_Data[6]!=kb_Clear);
L_29:
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_28
;  142	
;  143	  free(picNames);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_free
	POP	BC
;  144	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DisplayHomeScreen ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_printNames                         IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;G_0                                  IX-20      3   variable
;down                                 IX-17      1   variable
;up                                   IX-16      1   variable
;G_1                                  IX-15      3   variable
;Ypos                                 IX-12      1   variable
;key                                  IX-11      1   variable
;database                             IX-10      1   variable
;picNames                              IX-9      3   variable
;i                                     IX-6      3   variable
;startName                             IX-3      3   variable
;pics                                  IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__4:
	DB	"r"
	DB	0
L__5:
	DB	"HDPICDB"
	DB	0
	SEGMENT CODE
;  145	
;  146	/* This UI keeps the user selection in the middle of the screen. */
;  147	void printNames(uint24_t startName, char *picNames, uint24_t numOfPics){
_printNames:
	LD	HL,-12
	CALL	__frameset
;  148	  uint24_t i, Yoffset=0, y=0, curName=0;
	LD	BC,0
	LD	(IX+-12),BC
	LD	(IX+-6),BC
;  149	
;  150	  //clears old text and sets up for new text
;  151	  gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  152	  gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  153	  gfx_FillRectangle_NoClip(0,0,140,240);
	LD	BC,240
	PUSH	BC
	LD	BC,140
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  154	  gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  155	
;  156	  //re-draws UI lines
;  157	  gfx_HorizLine_NoClip(0,120,6);
	LD	BC,6
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  158	  gfx_HorizLine_NoClip(136,120,6);
	LD	BC,6
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,136
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  159	  gfx_HorizLine_NoClip(6,110,130);
	LD	BC,130
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  160	  gfx_HorizLine_NoClip(6,130,130);
	LD	BC,130
	PUSH	BC
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  161	  gfx_VertLine_NoClip(6,110,20);
	LD	BC,20
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  162	  gfx_VertLine_NoClip(136,110,21);
	LD	BC,21
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,136
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  163	
;  164	  /*if the selected start name is under 6, that means we need to start drawing
;  165	  * farther down the screen for the text to go in the right spot */
;  166	  gfx_SetTextXY(200,30);
	LD	BC,30
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  167	  gfx_PrintUInt(startName,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  168	  if(startName<4){
	LD	HL,(IX+6)
	LD	BC,4
	OR	A,A
	SBC	HL,BC
	JR	NC,L_33
;  169	    Yoffset = 75 - startName * Y_SPACING;
	LD	HL,(IX+6)
;  170	    startName = 0;
	LD	BC,0
	LD	A,25
	CALL	__imul_b
	LD	DE,HL
	LD	HL,75
	OR	A,A
	SBC	HL,DE
	LD	(IX+-12),HL
	LD	(IX+6),BC
;  171	  }else{
	JR	L_34
L_33:
;  172	    startName-=4;
	LD	IY,(IX+6)
	LEA	IY,IY+-4
	LD	(IX+6),IY
;  173	  }
L_34:
;  174	  curName=startName;
	LD	BC,(IX+6)
	LD	(IX+-9),BC
;  175	
;  176	
;  177	  /* draw the text on the screen. Starts displaying the name at element start
;  178	  * then iterates until out of pics or about to draw off the screen */
;  179	  for(i=0;i<numOfPics && y<180;i++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_40
L_38:
;  180	    //calculates where the text should be drawn
;  181	    y = i * Y_SPACING + Y_MARGIN + Yoffset;
	LD	HL,(IX+-3)
	LD	A,25
	CALL	__imul_b
	LD	IY,HL
	LEA	HL,IY+38
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-6),HL
;  182	
;  183	    // debug stuff
;  184	    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  185	    gfx_SetTextXY(200,10);
	LD	BC,10
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  186	    gfx_PrintUInt(i,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  187	    gfx_SetTextXY(200,20);
	LD	BC,20
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  188	    gfx_PrintUInt(y,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  189	    gfx_SetTextXY(200,40);
	LD	BC,40
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  190	    gfx_PrintUInt(curName,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  191	    gfx_SetTextXY(200,50);
	LD	BC,50
	PUSH	BC
	LD	BC,200
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  192	    gfx_PrintUInt(numOfPics,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  193	    gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  194	
;  195	    //Prints out the correct name
;  196	    gfx_PrintStringXY(&picNames[curName++*BYTES_PER_IMAGE_NAME],X_MARGIN,y);
	LD	DE,(IX+-9)
	INC	DE
	LD	BC,(IX+-9)
	LD	(IX+-9),DE
	LD	DE,(IX+-6)
	PUSH	DE
	LD	DE,8
	PUSH	DE
	LD	HL,9
	CALL	__imulu
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  197	    //while(!os_GetCSC());
;  198	
;  199	  }
L_40:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_41
	LD	BC,180
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_38
L_41:
;  200	  //slows down scrolling speed
;  201	  delay(100);
	LD	BC,100
	PUSH	BC
	CALL	_delay
	POP	BC
;  202	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printNames ***************************
;Name                         Addr/Register   Size   Type
;_delay                              IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;Yoffset                              IX-12      3   variable
;curName                               IX-9      3   variable
;y                                     IX-6      3   variable
;i                                     IX-3      3   variable
;numOfPics                            IX+12      3   parameter
;picNames                              IX+9      3   parameter
;startName                             IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


;  203	
;  204	
;  205	
;  206	
;  207	
;  208	
;  209	/* Rebuilds the database of images on the calculator*/
;  210	
;  211	uint24_t rebuildDB(uint8_t p){
_rebuildDB:
	LD	HL,-67
	CALL	__frameset
;  212	  char *var_name, *imgInfo[16], nameBuffer[10];
;  213	  uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-11),BC
;  214	  uint24_t imagesFound=0;
	LD	(IX+-4),BC
;  215	  char myData[8]="HDPALV1",names[8];
	LEA	DE,IX+-19
;  216	  ti_var_t database = ti_Open("HDPICDB","w"), palette;
	LD	BC,L__21
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	LD	HL,_0temp43
	LD	BC,8
	LDIR	
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  217	  ti_Write("HDDATV10",8,1,database);//Rewrites the header because w overwrites everything
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  218	
;  219	  //resets splash screen for new loading SetLoadingBarProgress
;  220	  SplashScreen();
	CALL	_SplashScreen
;  221	
;  222	  /*
;  223	  * Searches for palettes. This is a lot easier than searching for every single
;  224	  * image square because there's is guarunteed to only be one palette per image.
;  225	  * The palette containts all the useful information such as the image size and
;  226	  * the two letter ID for each appvar. This makes it easy to find every square via a loop.
;  227	  */
;  228	  while((var_name = ti_DetectVar(&search_pos, "HDPALV10", TI_APPVAR_TYPE)) != NULL) {
	JR	L_44
L_45:
;  229	    //sets progress of how many images were found
;  230	    SetLoadingBarProgress(++imagesFound,MAX_IMAGES);
	LD	BC,(IX+-4)
	INC	BC
	LD	(IX+-4),BC
	LD	BC,168
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  231	    //finds the name, letter ID, and size of entire image this palette belongs to.
;  232	    palette = ti_Open(var_name,"r");
	LD	BC,L__24
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-5),A
;  233	    //seeks past useless info
;  234	    ti_Seek(8,SEEK_CUR,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  235	    ti_Seek(16,SEEK_CUR,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  236	    //reads the important info (16 bytes)
;  237	    ti_Read(&imgInfo,16,1,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  238	    //Writes the info to the database
;  239	    ti_Write(imgInfo,16,1,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  240	    //closes palette for next iteration
;  241	    ti_Close(palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  242	  }
L_44:
	LD	BC,21
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	CALL	__icmpzero
	JR	NZ,L_45
;  243	  //closes the database
;  244	  ti_Close(database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  245	  gfx_End();
	CALL	_gfx_End
;  246	  ti_SetArchiveStatus(true,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;  247	  gfx_Begin();
	CALL	_gfx_Begin
;  248	  SplashScreen();
	CALL	_SplashScreen
;  249	  gfx_SetTextXY(100,195);
	LD	BC,195
	PUSH	BC
	LD	BC,100
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  250	  gfx_PrintUInt(imagesFound,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  251	  if (imagesFound==0){
	LD	HL,(IX+-4)
	CALL	__icmpzero
	JR	NZ,L_48
;  252	    noImagesFound();
	CALL	_noImagesFound
;  253	  }
L_48:
;  254	  SetLoadingBarProgress(++p,TASKS_TO_FINISH);
	INC	(IX+6)
	LD	BC,2
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  255	
;  256	
;  257	
;  258	  return imagesFound;
	LD	HL,(IX+-4)
;  259	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rebuildDB ***************************
;Name                         Addr/Register   Size   Type
;_noImagesFound                      IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_0temp43                            STATIC      8   variable
;imgInfo                              IX-67     48   variable
;myData                               IX-19      8   variable
;search_pos                           IX-11      3   variable
;var_name                              IX-8      3   variable
;palette                               IX-5      1   variable
;imagesFound                           IX-4      3   variable
;database                              IX-1      1   variable
;p                                     IX+6      1   parameter


; Stack Frame Size: 76 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__21:
	DB	"w"
	DB	0
L__22:
	DB	"HDPICDB"
	DB	0
L__23:
	DB	"HDDATV10"
	DB	0
L__24:
	DB	"r"
	DB	0
L__25:
	DB	"HDPALV10"
	DB	0
	SEGMENT TEXT
_0temp43:
	DB	72
	DB	68
	DB	80
	DB	65
	DB	76
	DB	86
	DB	49
	DB	0
	SEGMENT CODE
;  260	
;  261	void noImagesFound(){
_noImagesFound:
;  262	  gfx_SetTextFGColor(192);
	LD	BC,192
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  263	  PrintCenteredX("No Pictures Detected!",1);
	LD	BC,1
	PUSH	BC
	LD	BC,L__29
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  264	  gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  265	  PrintCenteredX("Convert some images and send them to your",11);
	LD	BC,11
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  266	  PrintCenteredX("calculator using the HDpic converter!",21);
	LD	BC,21
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  267	  PrintCenteredX("Tutorial:  https://youtu.be/s1-g8oSueQg",31);
	LD	BC,31
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  268	  PrintCenteredX("Press any key to quit",41);
	LD	BC,41
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  269	  return;
;  270	}
	RET	


;**************************** _noImagesFound ***************************
;Name                         Addr/Register   Size   Type
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__29:
	DB	"No Pictures Detected!"
	DB	0
L__30:
	DB	"Convert some images and send them to your"
	DB	0
L__31:
	DB	"calculator using the HDpic converter!"
	DB	0
L__32:
	DB	"Tutorial:  https://youtu.be/s1-g8oSueQg"
	DB	0
L__33:
	DB	"Press any key to quit"
	DB	0
	SEGMENT CODE
;  271	
;  272	//checks if the database is already created. If not, it creates it.
;  273	uint8_t databaseReady(){
_databaseReady:
	LD	HL,-27
	CALL	__frameset
;  274	  char *var_name;
;  275	  uint8_t *search_pos = NULL, exists=0, ready = 0;
	LD	BC,0
	LD	(IX+-6),BC
	LD	(IX+-3),0
;  276	  ti_var_t myAppVar;
;  277	  char myData[9]="HDDATV10"; //remember have one more space than text you're saving
	LEA	DE,IX+-18
	LD	HL,_1temp51
	LD	BC,9
	LDIR	
;  278	  char compare[9]="HDDATV10";
	LEA	DE,IX+-27
	LD	HL,_2temp52
	LD	BC,9
	LDIR	
;  279	  //tries to find database using known header
;  280	  while((var_name = ti_DetectVar(&search_pos, myData, TI_APPVAR_TYPE)) != NULL) {
	JR	L_53
L_54:
;  281	    exists=1;
	LD	(IX+-3),1
;  282	  }
L_53:
	LD	BC,21
	PUSH	BC
	PEA	IX+-18
	PEA	IX+-6
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
	CALL	__icmpzero
	JR	NZ,L_54
;  283	  //if file already exists, simply return
;  284	  if (exists == 1)
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_66
;  285	  ready = 2;
	LD	(IX+-1),2
;  286	  else{
	JR	L_68
L_66:
;  287	    //if file doesn't already exist, create it.
;  288	    //creates the database appvar and writes the header. Checks if wrote successfuly
;  289	    myAppVar=ti_Open("HDPICDB", "w");
	LD	BC,L__37
	PUSH	BC
	LD	BC,L__38
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-2),A
;  290	    if(!myAppVar)
;  291	    ready = 3;
;  292	    if(ti_Write(&myData,8,1,myAppVar)!=1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  293	    ready = 4;
;  294	    if (ti_Rewind(myAppVar) == EOF)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  295	    ready = 5;
;  296	    if (ti_Read(&myData,8, 1, myAppVar) != 1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  297	    ready = 6;
;  298	    if (strcmp(myData,compare)!=0)
	PEA	IX+-27
	PEA	IX+-18
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_63
;  299	    ready = 7;
	LD	(IX+-1),7
;  300	    else{
	JR	L_68
L_63:
;  301	      ready = 1;
	LD	(IX+-1),1
;  302	    }
;  303	  }
L_68:
;  304	  ti_CloseAll();
	CALL	_ti_CloseAll
;  305	
;  306	  //checks what happened
;  307	  if(ready==1){
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_72
;  308	    gfx_SetTextFGColor(195);
	LD	BC,195
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  309	    PrintCenteredX("created",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  310	    return 1;
	LD	A,1
	JR	L_73
;  311	  }else if(ready==2){
L_72:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_70
;  312	    gfx_SetTextFGColor(004);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  313	    PrintCenteredX("exists",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  314	    return 2;
	LD	A,2
	JR	L_73
;  315	  }else{
L_70:
;  316	    gfx_SetTextFGColor(224);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  317	    PrintCenteredX("failure",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  318	    gfx_SetTextXY(120,190);
	LD	BC,190
	PUSH	BC
	LD	BC,120
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  319	    gfx_PrintUInt(ready,1);
	LD	BC,1
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  320	    return 0;
	XOR	A,A
;  321	  }
;  322	
;  323	
;  324	}
L_73:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _databaseReady ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_2temp52                            STATIC      9   variable
;_1temp51                            STATIC      9   variable
;compare                              IX-27      9   variable
;myData                               IX-18      9   variable
;var_name                              IX-9      3   variable
;search_pos                            IX-6      3   variable
;exists                                IX-3      1   variable
;myAppVar                              IX-2      1   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 33 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__37:
	DB	"w"
	DB	0
L__38:
	DB	"HDPICDB"
	DB	0
L__45:
	DB	"created"
	DB	0
L__47:
	DB	"exists"
	DB	0
L__48:
	DB	"failure"
	DB	0
	SEGMENT TEXT
_1temp51:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
_2temp52:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
	SEGMENT CODE
;  325	
;  326	//makes a loading bar and fills it in depending on progress made (p) / tasks left (t)
;  327	void SetLoadingBarProgress(uint8_t p, uint8_t t){
_SetLoadingBarProgress:
	LD	HL,-4
	CALL	__frameset
;  328	  p=((double)p/(double)t)*200.0;
	UEXT	HL
	LD	L,(IX+6)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	(IX+-1),A
	UEXT	HL
	LD	L,(IX+9)
	LD	A,H
	LD	(IX+-4),BC
	LD	BC,HL
	CALL	__ultof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	HL,4718592
	LD	E,67
	CALL	__fmul
	CALL	__ftol
	LD	(IX+6),C
;  329	  //ensures loading bar doesn't go past max point
;  330	  if (p>200)
	LD	A,200
	CP	A,(IX+6)
	JR	NC,L_75
;  331	  p=200;
	LD	(IX+6),200
L_75:
;  332	
;  333	  gfx_SetColor(128);
	LD	BC,128
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  334	  gfx_FillRectangle_NoClip(60,153,(uint8_t)p,7);
	LD	BC,7
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,153
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  335	
;  336	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetLoadingBarProgress ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;t                                     IX+9      1   parameter
;p                                     IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  337	
;  338	//creates a simple splash screen when program starts
;  339	void SplashScreen(){
_SplashScreen:
;  340	  //sets color to grey
;  341	  gfx_SetColor(181);
	LD	BC,181
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  342	  gfx_FillRectangle_NoClip(60,80,LCD_WIDTH-120,LCD_HEIGHT-160);
	LD	BC,80
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  343	  /* Print a string */
;  344	  PrintCentered("HD Picture Viewer");
	LD	BC,L__52
	PUSH	BC
	CALL	_PrintCentered
	POP	BC
;  345	}
	RET	


;**************************** _SplashScreen ***************************
;Name                         Addr/Register   Size   Type
;_PrintCentered                      IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__52:
	DB	"HD Picture Viewer"
	DB	0
	SEGMENT CODE
;  346	
;  347	/* Prints a screen centered string */
;  348	void PrintCentered(const char *str)
;  349	{
_PrintCentered:
	CALL	__frameset0
;  350	  gfx_PrintStringXY(str,(LCD_WIDTH - gfx_GetStringWidth(str)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  351	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  352	/* Prints a X centered string */
;  353	void PrintCenteredX(const char *str, uint8_t y)
;  354	{
_PrintCenteredX:
	CALL	__frameset0
;  355	  gfx_PrintStringXY(str, (LCD_WIDTH - gfx_GetStringWidth(str)) / 2, y);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  356	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredX ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;y                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  357	/* Prints a Y centered string */
;  358	void PrintCenteredY(const char *str, uint8_t x)
;  359	{
_PrintCenteredY:
	CALL	__frameset0
;  360	  gfx_PrintStringXY(str, x, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  361	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredY ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;x                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  362	
;  363	
;  364	/* Draw text on the homescreen at the given X/Y location */
;  365	void printText(int8_t xpos, int8_t ypos, const char *text) {
_printText:
	CALL	__frameset0
;  366	  os_SetCursorPos(ypos, xpos);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  367	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  368	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;ypos                                  IX+9      1   parameter
;xpos                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strcmp:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Close:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _delay:ROM
	XREF __imulu:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishru_b:ROM
	XDEF _printText
	XDEF _PrintCenteredY
	XDEF _PrintCenteredX
	XDEF _PrintCentered
	XDEF _SplashScreen
	XDEF _SetLoadingBarProgress
	XDEF _databaseReady
	XDEF _noImagesFound
	XDEF _rebuildDB
	XDEF _printNames
	XDEF _DisplayHomeScreen
	XDEF _main
	END
