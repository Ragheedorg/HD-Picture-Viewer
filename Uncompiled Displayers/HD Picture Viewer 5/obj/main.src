; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <tice.h>
;    2	
;    3	#include <graphx.h>
;    4	#include <stdbool.h>
;    5	#include <stddef.h>
;    6	#include <stdint.h>
;    7	
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include <fileioc.h>
;   13	
;   14	/* globals */
;   15	
;   16	#define BYTES_PER_IMAGE_NAME 9 //8 for image name, 1 for null terminator
;   17	#define MAX_IMAGES 936 //Max images is this because max combinations of appvars goes up to that
;   18	#define TASKS_TO_FINISH 2
;   19	
;   20	
;   21	/* Function Prototyptes */
;   22	uint8_t databaseReady();
;   23	void DisplayHomeScreen(uint24_t pics);
;   24	void noImagesFound();
;   25	void PrintCentered(const char *str);
;   26	void PrintCenteredX(const char *str, uint8_t y);
;   27	void PrintCenteredY(const char *str, uint8_t x);
;   28	void printText(int8_t xpos, int8_t ypos, const char *text);
;   29	uint24_t rebuildDB(uint8_t p);
;   30	void SplashScreen();
;   31	void SetLoadingBarProgress(uint8_t p, uint8_t t);
;   32	
;   33	/* Main function, called first */
;   34	int main(void)
;   35	{
_main:
	LD	HL,-4
	CALL	__frameset
;   36	  uint8_t ready=0, tasksFinished = 0;
	LD	(IX+-1),0
;   37	  uint24_t picsDetected=0;
	LD	BC,0
	LD	(IX+-4),BC
;   38	  /* Clear the homescreen */
;   39	  //os_ClrHome();
;   40	
;   41	  gfx_Begin();
	CALL	_gfx_Begin
;   42	  ti_CloseAll();
	CALL	_ti_CloseAll
;   43	
;   44	  SplashScreen();
	CALL	_SplashScreen
;   45	  SetLoadingBarProgress(++tasksFinished, TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   46	  //checks if the database exists and is ready 0 failure; 1 created; 2 exists
;   47	  ready = databaseReady();
	CALL	_databaseReady
	LD	(IX+-1),A
;   48	  if (ready==0)
	OR	A,A
	JR	Z,L_9
;   49	  goto err;
;   50	
;   51	
;   52	  picsDetected=rebuildDB(tasksFinished);
	LD	BC,1
	PUSH	BC
	CALL	_rebuildDB
	POP	BC
	LD	(IX+-4),HL
;   53	  if(picsDetected==0)
	CALL	__icmpzero
	JR	Z,L_9
;   54	  goto err;
;   55	  //returns how many images were found. 0 means quit.
;   56	
;   57	
;   58	  SetLoadingBarProgress(++tasksFinished,TASKS_TO_FINISH);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;   59	  while (!os_GetCSC());
L_6:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_6
;   60	  DisplayHomeScreen(picsDetected);
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_DisplayHomeScreen
	POP	BC
;   61	
;   62	  err:
;   63	  //PrintCenteredX("Test",10);
;   64	  /* Waits for a keypress */
;   65	  while (!os_GetCSC());
L_9:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_9
;   66	  ti_CloseAll();
	CALL	_ti_CloseAll
;   67	  gfx_End();
	CALL	_gfx_End
	OR	A,A
;   68	
;   69	  /* Return 0 for success */
;   70	  return 0;
	SBC	HL,HL
;   71	
;   72	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_DisplayHomeScreen                  IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_rebuildDB                          IMPORT  -----   function
;_databaseReady                      IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;picsDetected                          IX-4      3   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;   73	
;   74	void DisplayHomeScreen(uint24_t pics){
_DisplayHomeScreen:
	LD	HL,-8
	CALL	__frameset
;   75	  char *picNames = malloc(pics*BYTES_PER_IMAGE_NAME); //BYTES_PER_IMAGE_NAME = 9
	LD	HL,(IX+6)
	LD	A,9
	CALL	__imul_b
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(IX+-8),HL
;   76	  ti_var_t database = ti_Open("HDPICDB","r");
	LD	BC,L__5
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-4),A
;   77	  uint24_t i;
;   78	  uint8_t Ypos=10;
	LD	(IX+-5),10
;   79	
;   80	  //makes the screen black and text white
;   81	  //gfx_FillScreen(0); //This won't let anything be displayed on top of it for some reason!?
;   82	  gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   83	  gfx_SetTextBGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   84	
;   85	  //seeks to the first image name
;   86	  ti_Seek(8,SEEK_SET,database);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;   87	  //PrintCenteredX("Test1",30);
;   88	  //loops through every picture that was detected and store the image name to picNames
;   89	  for(i=0;i<pics;i++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_15
L_13:
;   90	    ti_Read(&picNames[i * BYTES_PER_IMAGE_NAME],8,1,database);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	HL,(IX+-3)
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+-8)
	ADD	HL,BC
	PUSH	HL
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   91	    picNames[i * BYTES_PER_IMAGE_NAME + BYTES_PER_IMAGE_NAME - 1] = 0;
	LD	HL,(IX+-3)
	LD	A,9
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+9
	DEC	BC
	LD	HL,(IX+-8)
	ADD	HL,BC
	LD	(HL),0
;   92	    ti_Seek(16,SEEK_CUR,database);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;   93	    //PrintCenteredX("Test2",40);
;   94	    Ypos+=10;
	LD	A,(IX+-5)
	ADD	A,10
	LD	(IX+-5),A
;   95	    PrintCenteredX(&picNames[i*BYTES_PER_IMAGE_NAME],Ypos);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-3)
	LD	A,9
	CALL	__imul_b
	LD	BC,(IX+-8)
	ADD	HL,BC
	PUSH	HL
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   96	  }
L_15:
	LD	BC,(IX+6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_13
;   97	  free(picNames);
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_free
	POP	BC
;   98	
;   99	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _DisplayHomeScreen ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_PrintCenteredX                     IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;picNames                              IX-8      3   variable
;Ypos                                  IX-5      1   variable
;database                              IX-4      1   variable
;i                                     IX-3      3   variable
;pics                                  IX+6      3   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__5:
	DB	"r"
	DB	0
L__6:
	DB	"HDPICDB"
	DB	0
	SEGMENT CODE
;  100	
;  101	
;  102	/* Functions */
;  103	uint24_t rebuildDB(uint8_t p){
_rebuildDB:
	LD	HL,-67
	CALL	__frameset
;  104	  char *var_name, *imgInfo[16], nameBuffer[10];
;  105	  uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-11),BC
;  106	  uint24_t imagesFound=0;
	LD	(IX+-4),BC
;  107	  char myData[8]="HDPALV1",names[8];
	LEA	DE,IX+-19
;  108	  ti_var_t database = ti_Open("HDPICDB","w"), palette;
	LD	BC,L__9
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	LD	HL,_0temp18
	LD	BC,8
	LDIR	
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;  109	  ti_Write("HDDATV10",8,1,database);//Rewrites the header because w overwrites everything
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  110	
;  111	  //resets splash screen for new loading SetLoadingBarProgress
;  112	  SplashScreen();
	CALL	_SplashScreen
;  113	
;  114	  /*
;  115	  * Searches for palettes. This is a lot easier than searching for every single
;  116	  * image square because there's is guarunteed to only be one palette per image.
;  117	  * The palette containts all the useful information such as the image size and
;  118	  * the two letter ID for each appvar. This makes it easy to find every square via a loop.
;  119	  */
;  120	  while((var_name = ti_DetectVar(&search_pos, "HDPALV10", TI_APPVAR_TYPE)) != NULL) {
	JR	L_19
L_20:
;  121	    //sets progress of how many images were found
;  122	    SetLoadingBarProgress(++imagesFound,MAX_IMAGES);
	LD	BC,(IX+-4)
	INC	BC
	LD	(IX+-4),BC
	LD	BC,168
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  123	    //finds the name, letter ID, and size of entire image this palette belongs to.
;  124	    palette = ti_Open(var_name,"r");
	LD	BC,L__12
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-5),A
;  125	    //seeks past useless info
;  126	    ti_Seek(8,SEEK_CUR,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  127	    ti_Seek(16,SEEK_CUR,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  128	    //reads the important info (16 bytes)
;  129	    ti_Read(&imgInfo,16,1,palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  130	    //Writes the info to the database
;  131	    ti_Write(imgInfo,16,1,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PEA	IX+-67
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  132	    //closes palette for next iteration
;  133	    ti_Close(palette);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  134	  }
L_19:
	LD	BC,21
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	PEA	IX+-11
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	CALL	__icmpzero
	JR	NZ,L_20
;  135	  //closes the database
;  136	  ti_Close(database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  137	  gfx_End();
	CALL	_gfx_End
;  138	  ti_SetArchiveStatus(true,database);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;  139	  gfx_Begin();
	CALL	_gfx_Begin
;  140	  SplashScreen();
	CALL	_SplashScreen
;  141	  gfx_SetTextXY(100,195);
	LD	BC,195
	PUSH	BC
	LD	BC,100
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  142	  gfx_PrintUInt(imagesFound,3);
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  143	  if (imagesFound==0){
	LD	HL,(IX+-4)
	CALL	__icmpzero
	JR	NZ,L_23
;  144	    noImagesFound();
	CALL	_noImagesFound
;  145	  }
L_23:
;  146	  SetLoadingBarProgress(++p,TASKS_TO_FINISH);
	INC	(IX+6)
	LD	BC,2
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_SetLoadingBarProgress
	POP	BC
	POP	BC
;  147	
;  148	
;  149	
;  150	  return imagesFound;
	LD	HL,(IX+-4)
;  151	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _rebuildDB ***************************
;Name                         Addr/Register   Size   Type
;_noImagesFound                      IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_SetLoadingBarProgress              IMPORT  -----   function
;_SplashScreen                       IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_0temp18                            STATIC      8   variable
;imgInfo                              IX-67     48   variable
;myData                               IX-19      8   variable
;search_pos                           IX-11      3   variable
;var_name                              IX-8      3   variable
;palette                               IX-5      1   variable
;imagesFound                           IX-4      3   variable
;database                              IX-1      1   variable
;p                                     IX+6      1   parameter


; Stack Frame Size: 76 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"w"
	DB	0
L__10:
	DB	"HDPICDB"
	DB	0
L__11:
	DB	"HDDATV10"
	DB	0
L__12:
	DB	"r"
	DB	0
L__13:
	DB	"HDPALV10"
	DB	0
	SEGMENT TEXT
_0temp18:
	DB	72
	DB	68
	DB	80
	DB	65
	DB	76
	DB	86
	DB	49
	DB	0
	SEGMENT CODE
;  152	
;  153	void noImagesFound(){
_noImagesFound:
;  154	  gfx_SetTextFGColor(192);
	LD	BC,192
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  155	  PrintCenteredX("No Pictures Detected!",1);
	LD	BC,1
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  156	  gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  157	  PrintCenteredX("Convert some images and send them to your",11);
	LD	BC,11
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  158	  PrintCenteredX("calculator using the HDpic converter!",21);
	LD	BC,21
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  159	  PrintCenteredX("Tutorial:  https://youtu.be/s1-g8oSueQg",31);
	LD	BC,31
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  160	  PrintCenteredX("Press any key to quit",41);
	LD	BC,41
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  161	  return;
;  162	}
	RET	


;**************************** _noImagesFound ***************************
;Name                         Addr/Register   Size   Type
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__17:
	DB	"No Pictures Detected!"
	DB	0
L__18:
	DB	"Convert some images and send them to your"
	DB	0
L__19:
	DB	"calculator using the HDpic converter!"
	DB	0
L__20:
	DB	"Tutorial:  https://youtu.be/s1-g8oSueQg"
	DB	0
L__21:
	DB	"Press any key to quit"
	DB	0
	SEGMENT CODE
;  163	
;  164	//checks if the database is already created. If not, it creates it.
;  165	uint8_t databaseReady(){
_databaseReady:
	LD	HL,-27
	CALL	__frameset
;  166	  char *var_name;
;  167	  uint8_t *search_pos = NULL, exists=0, ready = 0;
	LD	BC,0
	LD	(IX+-6),BC
	LD	(IX+-3),0
;  168	  ti_var_t myAppVar;
;  169	  char myData[9]="HDDATV10"; //remember have one more space than text you're saving
	LEA	DE,IX+-18
	LD	HL,_1temp26
	LD	BC,9
	LDIR	
;  170	  char compare[9]="HDDATV10";
	LEA	DE,IX+-27
	LD	HL,_2temp27
	LD	BC,9
	LDIR	
;  171	  //tries to find database using known header
;  172	  while((var_name = ti_DetectVar(&search_pos, myData, TI_APPVAR_TYPE)) != NULL) {
	JR	L_28
L_29:
;  173	    exists=1;
	LD	(IX+-3),1
;  174	  }
L_28:
	LD	BC,21
	PUSH	BC
	PEA	IX+-18
	PEA	IX+-6
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
	CALL	__icmpzero
	JR	NZ,L_29
;  175	  //if file already exists, simply return
;  176	  if (exists == 1)
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_41
;  177	  ready = 2;
	LD	(IX+-1),2
;  178	  else{
	JR	L_43
L_41:
;  179	    //if file doesn't already exist, create it.
;  180	    //creates the database appvar and writes the header. Checks if wrote successfuly
;  181	    myAppVar=ti_Open("HDPICDB", "w");
	LD	BC,L__25
	PUSH	BC
	LD	BC,L__26
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-2),A
;  182	    if(!myAppVar)
;  183	    ready = 3;
;  184	    if(ti_Write(&myData,8,1,myAppVar)!=1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  185	    ready = 4;
;  186	    if (ti_Rewind(myAppVar) == EOF)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_ti_Rewind
	POP	BC
;  187	    ready = 5;
;  188	    if (ti_Read(&myData,8, 1, myAppVar) != 1)
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-18
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  189	    ready = 6;
;  190	    if (strcmp(myData,compare)!=0)
	PEA	IX+-27
	PEA	IX+-18
	CALL	_strcmp
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_38
;  191	    ready = 7;
	LD	(IX+-1),7
;  192	    else{
	JR	L_43
L_38:
;  193	      ready = 1;
	LD	(IX+-1),1
;  194	    }
;  195	  }
L_43:
;  196	  ti_CloseAll();
	CALL	_ti_CloseAll
;  197	
;  198	  //checks what happened
;  199	  if(ready==1){
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_47
;  200	    gfx_SetTextFGColor(195);
	LD	BC,195
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  201	    PrintCenteredX("created",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  202	    return 1;
	LD	A,1
	JR	L_48
;  203	  }else if(ready==2){
L_47:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_45
;  204	    gfx_SetTextFGColor(004);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  205	    PrintCenteredX("exists",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__35
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  206	    return 2;
	LD	A,2
	JR	L_48
;  207	  }else{
L_45:
;  208	    gfx_SetTextFGColor(224);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  209	    PrintCenteredX("failure",180);
	LD	BC,180
	PUSH	BC
	LD	BC,L__36
	PUSH	BC
	CALL	_PrintCenteredX
	POP	BC
	POP	BC
;  210	    gfx_SetTextXY(120,190);
	LD	BC,190
	PUSH	BC
	LD	BC,120
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  211	    gfx_PrintUInt(ready,1);
	LD	BC,1
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;  212	    return 0;
	XOR	A,A
;  213	  }
;  214	
;  215	
;  216	}
L_48:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _databaseReady ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_PrintCenteredX                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_ti_Read                            IMPORT  -----   function
;_ti_Rewind                          IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_2temp27                            STATIC      9   variable
;_1temp26                            STATIC      9   variable
;compare                              IX-27      9   variable
;myData                               IX-18      9   variable
;var_name                              IX-9      3   variable
;search_pos                            IX-6      3   variable
;exists                                IX-3      1   variable
;myAppVar                              IX-2      1   variable
;ready                                 IX-1      1   variable


; Stack Frame Size: 33 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__25:
	DB	"w"
	DB	0
L__26:
	DB	"HDPICDB"
	DB	0
L__33:
	DB	"created"
	DB	0
L__35:
	DB	"exists"
	DB	0
L__36:
	DB	"failure"
	DB	0
	SEGMENT TEXT
_1temp26:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
_2temp27:
	DB	72
	DB	68
	DB	68
	DB	65
	DB	84
	DB	86
	DB	49
	DB	48
	DB	0
	SEGMENT CODE
;  217	
;  218	//makes a loading bar and fills it in depending on progress made (p) / tasks left (t)
;  219	void SetLoadingBarProgress(uint8_t p, uint8_t t){
_SetLoadingBarProgress:
	LD	HL,-4
	CALL	__frameset
;  220	  p=((double)p/(double)t)*200.0;
	UEXT	HL
	LD	L,(IX+6)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	(IX+-1),A
	UEXT	HL
	LD	L,(IX+9)
	LD	A,H
	LD	(IX+-4),BC
	LD	BC,HL
	CALL	__ultof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	HL,4718592
	LD	E,67
	CALL	__fmul
	CALL	__ftol
	LD	(IX+6),C
;  221	  //ensures loading bar doesn't go past max point
;  222	  if (p>200)
	LD	A,200
	CP	A,(IX+6)
	JR	NC,L_50
;  223	  p=200;
	LD	(IX+6),200
L_50:
;  224	
;  225	  gfx_SetColor(128);
	LD	BC,128
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  226	  gfx_FillRectangle_NoClip(60,153,(uint8_t)p,7);
	LD	BC,7
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,153
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  227	
;  228	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _SetLoadingBarProgress ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;t                                     IX+9      1   parameter
;p                                     IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  229	
;  230	//creates a simple splash screen when program starts
;  231	void SplashScreen(){
_SplashScreen:
;  232	  //sets color to grey
;  233	  gfx_SetColor(181);
	LD	BC,181
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  234	  gfx_FillRectangle_NoClip(60,80,LCD_WIDTH-120,LCD_HEIGHT-160);
	LD	BC,80
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,60
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  235	  /* Print a string */
;  236	  PrintCentered("HD Picture Viewer");
	LD	BC,L__40
	PUSH	BC
	CALL	_PrintCentered
	POP	BC
;  237	}
	RET	


;**************************** _SplashScreen ***************************
;Name                         Addr/Register   Size   Type
;_PrintCentered                      IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__40:
	DB	"HD Picture Viewer"
	DB	0
	SEGMENT CODE
;  238	
;  239	/* Prints a screen centered string */
;  240	void PrintCentered(const char *str)
;  241	{
_PrintCentered:
	CALL	__frameset0
;  242	  gfx_PrintStringXY(str,(LCD_WIDTH - gfx_GetStringWidth(str)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  243	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  244	/* Prints a X centered string */
;  245	void PrintCenteredX(const char *str, uint8_t y)
;  246	{
_PrintCenteredX:
	CALL	__frameset0
;  247	  gfx_PrintStringXY(str, (LCD_WIDTH - gfx_GetStringWidth(str)) / 2, y);
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  248	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredX ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;y                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  249	/* Prints a Y centered string */
;  250	void PrintCenteredY(const char *str, uint8_t x)
;  251	{
_PrintCenteredY:
	CALL	__frameset0
;  252	  gfx_PrintStringXY(str, x, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  253	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _PrintCenteredY ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;x                                     IX+9      1   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  254	
;  255	
;  256	/* Draw text on the homescreen at the given X/Y location */
;  257	void printText(int8_t xpos, int8_t ypos, const char *text) {
_printText:
	CALL	__frameset0
;  258	  os_SetCursorPos(ypos, xpos);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  259	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  260	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;ypos                                  IX+9      1   parameter
;xpos                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strcmp:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_Rewind:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Close:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishru_b:ROM
	XDEF _printText
	XDEF _PrintCenteredY
	XDEF _PrintCenteredX
	XDEF _PrintCentered
	XDEF _SplashScreen
	XDEF _SetLoadingBarProgress
	XDEF _databaseReady
	XDEF _noImagesFound
	XDEF _rebuildDB
	XDEF _DisplayHomeScreen
	XDEF _main
	END
